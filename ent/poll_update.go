// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"poll-app/ent/poll"
	"poll-app/ent/predicate"
	"poll-app/ent/question"
	"poll-app/ent/startedpoll"
	"poll-app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PollUpdate is the builder for updating Poll entities.
type PollUpdate struct {
	config
	hooks    []Hook
	mutation *PollMutation
}

// Where appends a list predicates to the PollUpdate builder.
func (pu *PollUpdate) Where(ps ...predicate.Poll) *PollUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PollUpdate) SetTitle(s string) *PollUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PollUpdate) SetNillableTitle(s *string) *PollUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *PollUpdate) SetDescription(s string) *PollUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PollUpdate) SetNillableDescription(s *string) *PollUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PollUpdate) SetCreatedAt(t time.Time) *PollUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PollUpdate) SetNillableCreatedAt(t *time.Time) *PollUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PollUpdate) SetUpdatedAt(t time.Time) *PollUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pu *PollUpdate) SetNillableUpdatedAt(t *time.Time) *PollUpdate {
	if t != nil {
		pu.SetUpdatedAt(*t)
	}
	return pu
}

// SetCreatorID sets the "creator_id" field.
func (pu *PollUpdate) SetCreatorID(i int) *PollUpdate {
	pu.mutation.SetCreatorID(i)
	return pu
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (pu *PollUpdate) SetNillableCreatorID(i *int) *PollUpdate {
	if i != nil {
		pu.SetCreatorID(*i)
	}
	return pu
}

// SetCreator sets the "creator" edge to the User entity.
func (pu *PollUpdate) SetCreator(u *User) *PollUpdate {
	return pu.SetCreatorID(u.ID)
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (pu *PollUpdate) AddQuestionIDs(ids ...int) *PollUpdate {
	pu.mutation.AddQuestionIDs(ids...)
	return pu
}

// AddQuestions adds the "questions" edges to the Question entity.
func (pu *PollUpdate) AddQuestions(q ...*Question) *PollUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return pu.AddQuestionIDs(ids...)
}

// AddStartedPollIDs adds the "started_polls" edge to the StartedPoll entity by IDs.
func (pu *PollUpdate) AddStartedPollIDs(ids ...int) *PollUpdate {
	pu.mutation.AddStartedPollIDs(ids...)
	return pu
}

// AddStartedPolls adds the "started_polls" edges to the StartedPoll entity.
func (pu *PollUpdate) AddStartedPolls(s ...*StartedPoll) *PollUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddStartedPollIDs(ids...)
}

// Mutation returns the PollMutation object of the builder.
func (pu *PollUpdate) Mutation() *PollMutation {
	return pu.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (pu *PollUpdate) ClearCreator() *PollUpdate {
	pu.mutation.ClearCreator()
	return pu
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (pu *PollUpdate) ClearQuestions() *PollUpdate {
	pu.mutation.ClearQuestions()
	return pu
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (pu *PollUpdate) RemoveQuestionIDs(ids ...int) *PollUpdate {
	pu.mutation.RemoveQuestionIDs(ids...)
	return pu
}

// RemoveQuestions removes "questions" edges to Question entities.
func (pu *PollUpdate) RemoveQuestions(q ...*Question) *PollUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return pu.RemoveQuestionIDs(ids...)
}

// ClearStartedPolls clears all "started_polls" edges to the StartedPoll entity.
func (pu *PollUpdate) ClearStartedPolls() *PollUpdate {
	pu.mutation.ClearStartedPolls()
	return pu
}

// RemoveStartedPollIDs removes the "started_polls" edge to StartedPoll entities by IDs.
func (pu *PollUpdate) RemoveStartedPollIDs(ids ...int) *PollUpdate {
	pu.mutation.RemoveStartedPollIDs(ids...)
	return pu
}

// RemoveStartedPolls removes "started_polls" edges to StartedPoll entities.
func (pu *PollUpdate) RemoveStartedPolls(s ...*StartedPoll) *PollUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveStartedPollIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PollUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PollUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PollUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PollUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PollUpdate) check() error {
	if _, ok := pu.mutation.CreatorID(); pu.mutation.CreatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Poll.creator"`)
	}
	return nil
}

func (pu *PollUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(poll.Table, poll.Columns, sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(poll.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(poll.FieldDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(poll.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(poll.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poll.CreatorTable,
			Columns: []string{poll.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poll.CreatorTable,
			Columns: []string{poll.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.QuestionsTable,
			Columns: []string{poll.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !pu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.QuestionsTable,
			Columns: []string{poll.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.QuestionsTable,
			Columns: []string{poll.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.StartedPollsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.StartedPollsTable,
			Columns: []string{poll.StartedPollsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(startedpoll.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedStartedPollsIDs(); len(nodes) > 0 && !pu.mutation.StartedPollsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.StartedPollsTable,
			Columns: []string{poll.StartedPollsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(startedpoll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.StartedPollsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.StartedPollsTable,
			Columns: []string{poll.StartedPollsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(startedpoll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poll.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PollUpdateOne is the builder for updating a single Poll entity.
type PollUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PollMutation
}

// SetTitle sets the "title" field.
func (puo *PollUpdateOne) SetTitle(s string) *PollUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PollUpdateOne) SetNillableTitle(s *string) *PollUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *PollUpdateOne) SetDescription(s string) *PollUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PollUpdateOne) SetNillableDescription(s *string) *PollUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PollUpdateOne) SetCreatedAt(t time.Time) *PollUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PollUpdateOne) SetNillableCreatedAt(t *time.Time) *PollUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PollUpdateOne) SetUpdatedAt(t time.Time) *PollUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puo *PollUpdateOne) SetNillableUpdatedAt(t *time.Time) *PollUpdateOne {
	if t != nil {
		puo.SetUpdatedAt(*t)
	}
	return puo
}

// SetCreatorID sets the "creator_id" field.
func (puo *PollUpdateOne) SetCreatorID(i int) *PollUpdateOne {
	puo.mutation.SetCreatorID(i)
	return puo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (puo *PollUpdateOne) SetNillableCreatorID(i *int) *PollUpdateOne {
	if i != nil {
		puo.SetCreatorID(*i)
	}
	return puo
}

// SetCreator sets the "creator" edge to the User entity.
func (puo *PollUpdateOne) SetCreator(u *User) *PollUpdateOne {
	return puo.SetCreatorID(u.ID)
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (puo *PollUpdateOne) AddQuestionIDs(ids ...int) *PollUpdateOne {
	puo.mutation.AddQuestionIDs(ids...)
	return puo
}

// AddQuestions adds the "questions" edges to the Question entity.
func (puo *PollUpdateOne) AddQuestions(q ...*Question) *PollUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return puo.AddQuestionIDs(ids...)
}

// AddStartedPollIDs adds the "started_polls" edge to the StartedPoll entity by IDs.
func (puo *PollUpdateOne) AddStartedPollIDs(ids ...int) *PollUpdateOne {
	puo.mutation.AddStartedPollIDs(ids...)
	return puo
}

// AddStartedPolls adds the "started_polls" edges to the StartedPoll entity.
func (puo *PollUpdateOne) AddStartedPolls(s ...*StartedPoll) *PollUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddStartedPollIDs(ids...)
}

// Mutation returns the PollMutation object of the builder.
func (puo *PollUpdateOne) Mutation() *PollMutation {
	return puo.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (puo *PollUpdateOne) ClearCreator() *PollUpdateOne {
	puo.mutation.ClearCreator()
	return puo
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (puo *PollUpdateOne) ClearQuestions() *PollUpdateOne {
	puo.mutation.ClearQuestions()
	return puo
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (puo *PollUpdateOne) RemoveQuestionIDs(ids ...int) *PollUpdateOne {
	puo.mutation.RemoveQuestionIDs(ids...)
	return puo
}

// RemoveQuestions removes "questions" edges to Question entities.
func (puo *PollUpdateOne) RemoveQuestions(q ...*Question) *PollUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return puo.RemoveQuestionIDs(ids...)
}

// ClearStartedPolls clears all "started_polls" edges to the StartedPoll entity.
func (puo *PollUpdateOne) ClearStartedPolls() *PollUpdateOne {
	puo.mutation.ClearStartedPolls()
	return puo
}

// RemoveStartedPollIDs removes the "started_polls" edge to StartedPoll entities by IDs.
func (puo *PollUpdateOne) RemoveStartedPollIDs(ids ...int) *PollUpdateOne {
	puo.mutation.RemoveStartedPollIDs(ids...)
	return puo
}

// RemoveStartedPolls removes "started_polls" edges to StartedPoll entities.
func (puo *PollUpdateOne) RemoveStartedPolls(s ...*StartedPoll) *PollUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveStartedPollIDs(ids...)
}

// Where appends a list predicates to the PollUpdate builder.
func (puo *PollUpdateOne) Where(ps ...predicate.Poll) *PollUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PollUpdateOne) Select(field string, fields ...string) *PollUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Poll entity.
func (puo *PollUpdateOne) Save(ctx context.Context) (*Poll, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PollUpdateOne) SaveX(ctx context.Context) *Poll {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PollUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PollUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PollUpdateOne) check() error {
	if _, ok := puo.mutation.CreatorID(); puo.mutation.CreatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Poll.creator"`)
	}
	return nil
}

func (puo *PollUpdateOne) sqlSave(ctx context.Context) (_node *Poll, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(poll.Table, poll.Columns, sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Poll.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, poll.FieldID)
		for _, f := range fields {
			if !poll.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != poll.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(poll.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(poll.FieldDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(poll.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(poll.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poll.CreatorTable,
			Columns: []string{poll.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poll.CreatorTable,
			Columns: []string{poll.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.QuestionsTable,
			Columns: []string{poll.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !puo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.QuestionsTable,
			Columns: []string{poll.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.QuestionsTable,
			Columns: []string{poll.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.StartedPollsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.StartedPollsTable,
			Columns: []string{poll.StartedPollsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(startedpoll.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedStartedPollsIDs(); len(nodes) > 0 && !puo.mutation.StartedPollsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.StartedPollsTable,
			Columns: []string{poll.StartedPollsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(startedpoll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.StartedPollsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.StartedPollsTable,
			Columns: []string{poll.StartedPollsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(startedpoll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Poll{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poll.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
