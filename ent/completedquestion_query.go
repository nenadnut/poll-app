// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"poll-app/ent/completedquestion"
	"poll-app/ent/predicate"
	"poll-app/ent/question"
	"poll-app/ent/startedpoll"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompletedQuestionQuery is the builder for querying CompletedQuestion entities.
type CompletedQuestionQuery struct {
	config
	ctx             *QueryContext
	order           []completedquestion.OrderOption
	inters          []Interceptor
	predicates      []predicate.CompletedQuestion
	withStartedPoll *StartedPollQuery
	withQuestion    *QuestionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CompletedQuestionQuery builder.
func (cqq *CompletedQuestionQuery) Where(ps ...predicate.CompletedQuestion) *CompletedQuestionQuery {
	cqq.predicates = append(cqq.predicates, ps...)
	return cqq
}

// Limit the number of records to be returned by this query.
func (cqq *CompletedQuestionQuery) Limit(limit int) *CompletedQuestionQuery {
	cqq.ctx.Limit = &limit
	return cqq
}

// Offset to start from.
func (cqq *CompletedQuestionQuery) Offset(offset int) *CompletedQuestionQuery {
	cqq.ctx.Offset = &offset
	return cqq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cqq *CompletedQuestionQuery) Unique(unique bool) *CompletedQuestionQuery {
	cqq.ctx.Unique = &unique
	return cqq
}

// Order specifies how the records should be ordered.
func (cqq *CompletedQuestionQuery) Order(o ...completedquestion.OrderOption) *CompletedQuestionQuery {
	cqq.order = append(cqq.order, o...)
	return cqq
}

// QueryStartedPoll chains the current query on the "started_poll" edge.
func (cqq *CompletedQuestionQuery) QueryStartedPoll() *StartedPollQuery {
	query := (&StartedPollClient{config: cqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(completedquestion.Table, completedquestion.FieldID, selector),
			sqlgraph.To(startedpoll.Table, startedpoll.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, completedquestion.StartedPollTable, completedquestion.StartedPollColumn),
		)
		fromU = sqlgraph.SetNeighbors(cqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestion chains the current query on the "question" edge.
func (cqq *CompletedQuestionQuery) QueryQuestion() *QuestionQuery {
	query := (&QuestionClient{config: cqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(completedquestion.Table, completedquestion.FieldID, selector),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, completedquestion.QuestionTable, completedquestion.QuestionColumn),
		)
		fromU = sqlgraph.SetNeighbors(cqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CompletedQuestion entity from the query.
// Returns a *NotFoundError when no CompletedQuestion was found.
func (cqq *CompletedQuestionQuery) First(ctx context.Context) (*CompletedQuestion, error) {
	nodes, err := cqq.Limit(1).All(setContextOp(ctx, cqq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{completedquestion.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cqq *CompletedQuestionQuery) FirstX(ctx context.Context) *CompletedQuestion {
	node, err := cqq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CompletedQuestion ID from the query.
// Returns a *NotFoundError when no CompletedQuestion ID was found.
func (cqq *CompletedQuestionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cqq.Limit(1).IDs(setContextOp(ctx, cqq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{completedquestion.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cqq *CompletedQuestionQuery) FirstIDX(ctx context.Context) int {
	id, err := cqq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CompletedQuestion entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CompletedQuestion entity is found.
// Returns a *NotFoundError when no CompletedQuestion entities are found.
func (cqq *CompletedQuestionQuery) Only(ctx context.Context) (*CompletedQuestion, error) {
	nodes, err := cqq.Limit(2).All(setContextOp(ctx, cqq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{completedquestion.Label}
	default:
		return nil, &NotSingularError{completedquestion.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cqq *CompletedQuestionQuery) OnlyX(ctx context.Context) *CompletedQuestion {
	node, err := cqq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CompletedQuestion ID in the query.
// Returns a *NotSingularError when more than one CompletedQuestion ID is found.
// Returns a *NotFoundError when no entities are found.
func (cqq *CompletedQuestionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cqq.Limit(2).IDs(setContextOp(ctx, cqq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{completedquestion.Label}
	default:
		err = &NotSingularError{completedquestion.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cqq *CompletedQuestionQuery) OnlyIDX(ctx context.Context) int {
	id, err := cqq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CompletedQuestions.
func (cqq *CompletedQuestionQuery) All(ctx context.Context) ([]*CompletedQuestion, error) {
	ctx = setContextOp(ctx, cqq.ctx, "All")
	if err := cqq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CompletedQuestion, *CompletedQuestionQuery]()
	return withInterceptors[[]*CompletedQuestion](ctx, cqq, qr, cqq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cqq *CompletedQuestionQuery) AllX(ctx context.Context) []*CompletedQuestion {
	nodes, err := cqq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CompletedQuestion IDs.
func (cqq *CompletedQuestionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if cqq.ctx.Unique == nil && cqq.path != nil {
		cqq.Unique(true)
	}
	ctx = setContextOp(ctx, cqq.ctx, "IDs")
	if err = cqq.Select(completedquestion.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cqq *CompletedQuestionQuery) IDsX(ctx context.Context) []int {
	ids, err := cqq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cqq *CompletedQuestionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cqq.ctx, "Count")
	if err := cqq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cqq, querierCount[*CompletedQuestionQuery](), cqq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cqq *CompletedQuestionQuery) CountX(ctx context.Context) int {
	count, err := cqq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cqq *CompletedQuestionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cqq.ctx, "Exist")
	switch _, err := cqq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cqq *CompletedQuestionQuery) ExistX(ctx context.Context) bool {
	exist, err := cqq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CompletedQuestionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cqq *CompletedQuestionQuery) Clone() *CompletedQuestionQuery {
	if cqq == nil {
		return nil
	}
	return &CompletedQuestionQuery{
		config:          cqq.config,
		ctx:             cqq.ctx.Clone(),
		order:           append([]completedquestion.OrderOption{}, cqq.order...),
		inters:          append([]Interceptor{}, cqq.inters...),
		predicates:      append([]predicate.CompletedQuestion{}, cqq.predicates...),
		withStartedPoll: cqq.withStartedPoll.Clone(),
		withQuestion:    cqq.withQuestion.Clone(),
		// clone intermediate query.
		sql:  cqq.sql.Clone(),
		path: cqq.path,
	}
}

// WithStartedPoll tells the query-builder to eager-load the nodes that are connected to
// the "started_poll" edge. The optional arguments are used to configure the query builder of the edge.
func (cqq *CompletedQuestionQuery) WithStartedPoll(opts ...func(*StartedPollQuery)) *CompletedQuestionQuery {
	query := (&StartedPollClient{config: cqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cqq.withStartedPoll = query
	return cqq
}

// WithQuestion tells the query-builder to eager-load the nodes that are connected to
// the "question" edge. The optional arguments are used to configure the query builder of the edge.
func (cqq *CompletedQuestionQuery) WithQuestion(opts ...func(*QuestionQuery)) *CompletedQuestionQuery {
	query := (&QuestionClient{config: cqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cqq.withQuestion = query
	return cqq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		StartedPollID int `json:"started_poll_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CompletedQuestion.Query().
//		GroupBy(completedquestion.FieldStartedPollID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cqq *CompletedQuestionQuery) GroupBy(field string, fields ...string) *CompletedQuestionGroupBy {
	cqq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CompletedQuestionGroupBy{build: cqq}
	grbuild.flds = &cqq.ctx.Fields
	grbuild.label = completedquestion.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		StartedPollID int `json:"started_poll_id,omitempty"`
//	}
//
//	client.CompletedQuestion.Query().
//		Select(completedquestion.FieldStartedPollID).
//		Scan(ctx, &v)
func (cqq *CompletedQuestionQuery) Select(fields ...string) *CompletedQuestionSelect {
	cqq.ctx.Fields = append(cqq.ctx.Fields, fields...)
	sbuild := &CompletedQuestionSelect{CompletedQuestionQuery: cqq}
	sbuild.label = completedquestion.Label
	sbuild.flds, sbuild.scan = &cqq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CompletedQuestionSelect configured with the given aggregations.
func (cqq *CompletedQuestionQuery) Aggregate(fns ...AggregateFunc) *CompletedQuestionSelect {
	return cqq.Select().Aggregate(fns...)
}

func (cqq *CompletedQuestionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cqq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cqq); err != nil {
				return err
			}
		}
	}
	for _, f := range cqq.ctx.Fields {
		if !completedquestion.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cqq.path != nil {
		prev, err := cqq.path(ctx)
		if err != nil {
			return err
		}
		cqq.sql = prev
	}
	return nil
}

func (cqq *CompletedQuestionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CompletedQuestion, error) {
	var (
		nodes       = []*CompletedQuestion{}
		_spec       = cqq.querySpec()
		loadedTypes = [2]bool{
			cqq.withStartedPoll != nil,
			cqq.withQuestion != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CompletedQuestion).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CompletedQuestion{config: cqq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cqq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cqq.withStartedPoll; query != nil {
		if err := cqq.loadStartedPoll(ctx, query, nodes, nil,
			func(n *CompletedQuestion, e *StartedPoll) { n.Edges.StartedPoll = e }); err != nil {
			return nil, err
		}
	}
	if query := cqq.withQuestion; query != nil {
		if err := cqq.loadQuestion(ctx, query, nodes, nil,
			func(n *CompletedQuestion, e *Question) { n.Edges.Question = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cqq *CompletedQuestionQuery) loadStartedPoll(ctx context.Context, query *StartedPollQuery, nodes []*CompletedQuestion, init func(*CompletedQuestion), assign func(*CompletedQuestion, *StartedPoll)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CompletedQuestion)
	for i := range nodes {
		fk := nodes[i].StartedPollID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(startedpoll.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "started_poll_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cqq *CompletedQuestionQuery) loadQuestion(ctx context.Context, query *QuestionQuery, nodes []*CompletedQuestion, init func(*CompletedQuestion), assign func(*CompletedQuestion, *Question)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CompletedQuestion)
	for i := range nodes {
		fk := nodes[i].QuestionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(question.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "question_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cqq *CompletedQuestionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cqq.querySpec()
	_spec.Node.Columns = cqq.ctx.Fields
	if len(cqq.ctx.Fields) > 0 {
		_spec.Unique = cqq.ctx.Unique != nil && *cqq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cqq.driver, _spec)
}

func (cqq *CompletedQuestionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(completedquestion.Table, completedquestion.Columns, sqlgraph.NewFieldSpec(completedquestion.FieldID, field.TypeInt))
	_spec.From = cqq.sql
	if unique := cqq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cqq.path != nil {
		_spec.Unique = true
	}
	if fields := cqq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, completedquestion.FieldID)
		for i := range fields {
			if fields[i] != completedquestion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cqq.withStartedPoll != nil {
			_spec.Node.AddColumnOnce(completedquestion.FieldStartedPollID)
		}
		if cqq.withQuestion != nil {
			_spec.Node.AddColumnOnce(completedquestion.FieldQuestionID)
		}
	}
	if ps := cqq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cqq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cqq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cqq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cqq *CompletedQuestionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cqq.driver.Dialect())
	t1 := builder.Table(completedquestion.Table)
	columns := cqq.ctx.Fields
	if len(columns) == 0 {
		columns = completedquestion.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cqq.sql != nil {
		selector = cqq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cqq.ctx.Unique != nil && *cqq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cqq.predicates {
		p(selector)
	}
	for _, p := range cqq.order {
		p(selector)
	}
	if offset := cqq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cqq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CompletedQuestionGroupBy is the group-by builder for CompletedQuestion entities.
type CompletedQuestionGroupBy struct {
	selector
	build *CompletedQuestionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cqgb *CompletedQuestionGroupBy) Aggregate(fns ...AggregateFunc) *CompletedQuestionGroupBy {
	cqgb.fns = append(cqgb.fns, fns...)
	return cqgb
}

// Scan applies the selector query and scans the result into the given value.
func (cqgb *CompletedQuestionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cqgb.build.ctx, "GroupBy")
	if err := cqgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CompletedQuestionQuery, *CompletedQuestionGroupBy](ctx, cqgb.build, cqgb, cqgb.build.inters, v)
}

func (cqgb *CompletedQuestionGroupBy) sqlScan(ctx context.Context, root *CompletedQuestionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cqgb.fns))
	for _, fn := range cqgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cqgb.flds)+len(cqgb.fns))
		for _, f := range *cqgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cqgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cqgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CompletedQuestionSelect is the builder for selecting fields of CompletedQuestion entities.
type CompletedQuestionSelect struct {
	*CompletedQuestionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cqs *CompletedQuestionSelect) Aggregate(fns ...AggregateFunc) *CompletedQuestionSelect {
	cqs.fns = append(cqs.fns, fns...)
	return cqs
}

// Scan applies the selector query and scans the result into the given value.
func (cqs *CompletedQuestionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cqs.ctx, "Select")
	if err := cqs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CompletedQuestionQuery, *CompletedQuestionSelect](ctx, cqs.CompletedQuestionQuery, cqs, cqs.inters, v)
}

func (cqs *CompletedQuestionSelect) sqlScan(ctx context.Context, root *CompletedQuestionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cqs.fns))
	for _, fn := range cqs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cqs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cqs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
