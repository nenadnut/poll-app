// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"poll-app/ent/poll"
	"poll-app/ent/startedpoll"
	"poll-app/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// StartedPoll is the model entity for the StartedPoll schema.
type StartedPoll struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PollID holds the value of the "poll_id" field.
	PollID int `json:"poll_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Completed holds the value of the "completed" field.
	Completed bool `json:"completed,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"-"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StartedPollQuery when eager-loading is set.
	Edges        StartedPollEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StartedPollEdges holds the relations/edges for other nodes in the graph.
type StartedPollEdges struct {
	// Poll holds the value of the poll edge.
	Poll *Poll `json:"poll,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// CompletedQuestions holds the value of the completed_questions edge.
	CompletedQuestions []*CompletedQuestion `json:"completed_questions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PollOrErr returns the Poll value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StartedPollEdges) PollOrErr() (*Poll, error) {
	if e.loadedTypes[0] {
		if e.Poll == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: poll.Label}
		}
		return e.Poll, nil
	}
	return nil, &NotLoadedError{edge: "poll"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StartedPollEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CompletedQuestionsOrErr returns the CompletedQuestions value or an error if the edge
// was not loaded in eager-loading.
func (e StartedPollEdges) CompletedQuestionsOrErr() ([]*CompletedQuestion, error) {
	if e.loadedTypes[2] {
		return e.CompletedQuestions, nil
	}
	return nil, &NotLoadedError{edge: "completed_questions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StartedPoll) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case startedpoll.FieldCompleted:
			values[i] = new(sql.NullBool)
		case startedpoll.FieldID, startedpoll.FieldPollID, startedpoll.FieldUserID:
			values[i] = new(sql.NullInt64)
		case startedpoll.FieldCreatedAt, startedpoll.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StartedPoll fields.
func (sp *StartedPoll) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case startedpoll.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sp.ID = int(value.Int64)
		case startedpoll.FieldPollID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field poll_id", values[i])
			} else if value.Valid {
				sp.PollID = int(value.Int64)
			}
		case startedpoll.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				sp.UserID = int(value.Int64)
			}
		case startedpoll.FieldCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field completed", values[i])
			} else if value.Valid {
				sp.Completed = value.Bool
			}
		case startedpoll.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sp.CreatedAt = value.Time
			}
		case startedpoll.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sp.UpdatedAt = value.Time
			}
		default:
			sp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StartedPoll.
// This includes values selected through modifiers, order, etc.
func (sp *StartedPoll) Value(name string) (ent.Value, error) {
	return sp.selectValues.Get(name)
}

// QueryPoll queries the "poll" edge of the StartedPoll entity.
func (sp *StartedPoll) QueryPoll() *PollQuery {
	return NewStartedPollClient(sp.config).QueryPoll(sp)
}

// QueryUser queries the "user" edge of the StartedPoll entity.
func (sp *StartedPoll) QueryUser() *UserQuery {
	return NewStartedPollClient(sp.config).QueryUser(sp)
}

// QueryCompletedQuestions queries the "completed_questions" edge of the StartedPoll entity.
func (sp *StartedPoll) QueryCompletedQuestions() *CompletedQuestionQuery {
	return NewStartedPollClient(sp.config).QueryCompletedQuestions(sp)
}

// Update returns a builder for updating this StartedPoll.
// Note that you need to call StartedPoll.Unwrap() before calling this method if this StartedPoll
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *StartedPoll) Update() *StartedPollUpdateOne {
	return NewStartedPollClient(sp.config).UpdateOne(sp)
}

// Unwrap unwraps the StartedPoll entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *StartedPoll) Unwrap() *StartedPoll {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: StartedPoll is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *StartedPoll) String() string {
	var builder strings.Builder
	builder.WriteString("StartedPoll(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("poll_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.PollID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.UserID))
	builder.WriteString(", ")
	builder.WriteString("completed=")
	builder.WriteString(fmt.Sprintf("%v", sp.Completed))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sp.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StartedPolls is a parsable slice of StartedPoll.
type StartedPolls []*StartedPoll
