// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"poll-app/ent/completedquestion"
	"poll-app/ent/question"
	"poll-app/ent/startedpoll"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompletedQuestionCreate is the builder for creating a CompletedQuestion entity.
type CompletedQuestionCreate struct {
	config
	mutation *CompletedQuestionMutation
	hooks    []Hook
}

// SetStartedPollID sets the "started_poll_id" field.
func (cqc *CompletedQuestionCreate) SetStartedPollID(i int) *CompletedQuestionCreate {
	cqc.mutation.SetStartedPollID(i)
	return cqc
}

// SetQuestionID sets the "question_id" field.
func (cqc *CompletedQuestionCreate) SetQuestionID(i int) *CompletedQuestionCreate {
	cqc.mutation.SetQuestionID(i)
	return cqc
}

// SetAnswers sets the "answers" field.
func (cqc *CompletedQuestionCreate) SetAnswers(i []int) *CompletedQuestionCreate {
	cqc.mutation.SetAnswers(i)
	return cqc
}

// SetCreatedAt sets the "created_at" field.
func (cqc *CompletedQuestionCreate) SetCreatedAt(t time.Time) *CompletedQuestionCreate {
	cqc.mutation.SetCreatedAt(t)
	return cqc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cqc *CompletedQuestionCreate) SetNillableCreatedAt(t *time.Time) *CompletedQuestionCreate {
	if t != nil {
		cqc.SetCreatedAt(*t)
	}
	return cqc
}

// SetUpdatedAt sets the "updated_at" field.
func (cqc *CompletedQuestionCreate) SetUpdatedAt(t time.Time) *CompletedQuestionCreate {
	cqc.mutation.SetUpdatedAt(t)
	return cqc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cqc *CompletedQuestionCreate) SetNillableUpdatedAt(t *time.Time) *CompletedQuestionCreate {
	if t != nil {
		cqc.SetUpdatedAt(*t)
	}
	return cqc
}

// SetStartedPoll sets the "started_poll" edge to the StartedPoll entity.
func (cqc *CompletedQuestionCreate) SetStartedPoll(s *StartedPoll) *CompletedQuestionCreate {
	return cqc.SetStartedPollID(s.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (cqc *CompletedQuestionCreate) SetQuestion(q *Question) *CompletedQuestionCreate {
	return cqc.SetQuestionID(q.ID)
}

// Mutation returns the CompletedQuestionMutation object of the builder.
func (cqc *CompletedQuestionCreate) Mutation() *CompletedQuestionMutation {
	return cqc.mutation
}

// Save creates the CompletedQuestion in the database.
func (cqc *CompletedQuestionCreate) Save(ctx context.Context) (*CompletedQuestion, error) {
	cqc.defaults()
	return withHooks(ctx, cqc.sqlSave, cqc.mutation, cqc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cqc *CompletedQuestionCreate) SaveX(ctx context.Context) *CompletedQuestion {
	v, err := cqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cqc *CompletedQuestionCreate) Exec(ctx context.Context) error {
	_, err := cqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cqc *CompletedQuestionCreate) ExecX(ctx context.Context) {
	if err := cqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cqc *CompletedQuestionCreate) defaults() {
	if _, ok := cqc.mutation.CreatedAt(); !ok {
		v := completedquestion.DefaultCreatedAt()
		cqc.mutation.SetCreatedAt(v)
	}
	if _, ok := cqc.mutation.UpdatedAt(); !ok {
		v := completedquestion.DefaultUpdatedAt()
		cqc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cqc *CompletedQuestionCreate) check() error {
	if _, ok := cqc.mutation.StartedPollID(); !ok {
		return &ValidationError{Name: "started_poll_id", err: errors.New(`ent: missing required field "CompletedQuestion.started_poll_id"`)}
	}
	if _, ok := cqc.mutation.QuestionID(); !ok {
		return &ValidationError{Name: "question_id", err: errors.New(`ent: missing required field "CompletedQuestion.question_id"`)}
	}
	if _, ok := cqc.mutation.Answers(); !ok {
		return &ValidationError{Name: "answers", err: errors.New(`ent: missing required field "CompletedQuestion.answers"`)}
	}
	if _, ok := cqc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CompletedQuestion.created_at"`)}
	}
	if _, ok := cqc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CompletedQuestion.updated_at"`)}
	}
	if _, ok := cqc.mutation.StartedPollID(); !ok {
		return &ValidationError{Name: "started_poll", err: errors.New(`ent: missing required edge "CompletedQuestion.started_poll"`)}
	}
	if _, ok := cqc.mutation.QuestionID(); !ok {
		return &ValidationError{Name: "question", err: errors.New(`ent: missing required edge "CompletedQuestion.question"`)}
	}
	return nil
}

func (cqc *CompletedQuestionCreate) sqlSave(ctx context.Context) (*CompletedQuestion, error) {
	if err := cqc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cqc.mutation.id = &_node.ID
	cqc.mutation.done = true
	return _node, nil
}

func (cqc *CompletedQuestionCreate) createSpec() (*CompletedQuestion, *sqlgraph.CreateSpec) {
	var (
		_node = &CompletedQuestion{config: cqc.config}
		_spec = sqlgraph.NewCreateSpec(completedquestion.Table, sqlgraph.NewFieldSpec(completedquestion.FieldID, field.TypeInt))
	)
	if value, ok := cqc.mutation.Answers(); ok {
		_spec.SetField(completedquestion.FieldAnswers, field.TypeJSON, value)
		_node.Answers = value
	}
	if value, ok := cqc.mutation.CreatedAt(); ok {
		_spec.SetField(completedquestion.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cqc.mutation.UpdatedAt(); ok {
		_spec.SetField(completedquestion.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cqc.mutation.StartedPollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedquestion.StartedPollTable,
			Columns: []string{completedquestion.StartedPollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(startedpoll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StartedPollID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cqc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedquestion.QuestionTable,
			Columns: []string{completedquestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CompletedQuestionCreateBulk is the builder for creating many CompletedQuestion entities in bulk.
type CompletedQuestionCreateBulk struct {
	config
	err      error
	builders []*CompletedQuestionCreate
}

// Save creates the CompletedQuestion entities in the database.
func (cqcb *CompletedQuestionCreateBulk) Save(ctx context.Context) ([]*CompletedQuestion, error) {
	if cqcb.err != nil {
		return nil, cqcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cqcb.builders))
	nodes := make([]*CompletedQuestion, len(cqcb.builders))
	mutators := make([]Mutator, len(cqcb.builders))
	for i := range cqcb.builders {
		func(i int, root context.Context) {
			builder := cqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompletedQuestionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cqcb *CompletedQuestionCreateBulk) SaveX(ctx context.Context) []*CompletedQuestion {
	v, err := cqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cqcb *CompletedQuestionCreateBulk) Exec(ctx context.Context) error {
	_, err := cqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cqcb *CompletedQuestionCreateBulk) ExecX(ctx context.Context) {
	if err := cqcb.Exec(ctx); err != nil {
		panic(err)
	}
}
