// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"poll-app/ent/completedquestion"
	"poll-app/ent/question"
	"poll-app/ent/startedpoll"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CompletedQuestion is the model entity for the CompletedQuestion schema.
type CompletedQuestion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StartedPollID holds the value of the "started_poll_id" field.
	StartedPollID int `json:"started_poll_id,omitempty"`
	// QuestionID holds the value of the "question_id" field.
	QuestionID int `json:"question_id,omitempty"`
	// Answers holds the value of the "answers" field.
	Answers []int `json:"answers,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"-"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompletedQuestionQuery when eager-loading is set.
	Edges        CompletedQuestionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CompletedQuestionEdges holds the relations/edges for other nodes in the graph.
type CompletedQuestionEdges struct {
	// StartedPoll holds the value of the started_poll edge.
	StartedPoll *StartedPoll `json:"started_poll,omitempty"`
	// Question holds the value of the question edge.
	Question *Question `json:"question,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StartedPollOrErr returns the StartedPoll value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompletedQuestionEdges) StartedPollOrErr() (*StartedPoll, error) {
	if e.loadedTypes[0] {
		if e.StartedPoll == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: startedpoll.Label}
		}
		return e.StartedPoll, nil
	}
	return nil, &NotLoadedError{edge: "started_poll"}
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompletedQuestionEdges) QuestionOrErr() (*Question, error) {
	if e.loadedTypes[1] {
		if e.Question == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: question.Label}
		}
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CompletedQuestion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case completedquestion.FieldAnswers:
			values[i] = new([]byte)
		case completedquestion.FieldID, completedquestion.FieldStartedPollID, completedquestion.FieldQuestionID:
			values[i] = new(sql.NullInt64)
		case completedquestion.FieldCreatedAt, completedquestion.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CompletedQuestion fields.
func (cq *CompletedQuestion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case completedquestion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cq.ID = int(value.Int64)
		case completedquestion.FieldStartedPollID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field started_poll_id", values[i])
			} else if value.Valid {
				cq.StartedPollID = int(value.Int64)
			}
		case completedquestion.FieldQuestionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_id", values[i])
			} else if value.Valid {
				cq.QuestionID = int(value.Int64)
			}
		case completedquestion.FieldAnswers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field answers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cq.Answers); err != nil {
					return fmt.Errorf("unmarshal field answers: %w", err)
				}
			}
		case completedquestion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cq.CreatedAt = value.Time
			}
		case completedquestion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cq.UpdatedAt = value.Time
			}
		default:
			cq.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CompletedQuestion.
// This includes values selected through modifiers, order, etc.
func (cq *CompletedQuestion) Value(name string) (ent.Value, error) {
	return cq.selectValues.Get(name)
}

// QueryStartedPoll queries the "started_poll" edge of the CompletedQuestion entity.
func (cq *CompletedQuestion) QueryStartedPoll() *StartedPollQuery {
	return NewCompletedQuestionClient(cq.config).QueryStartedPoll(cq)
}

// QueryQuestion queries the "question" edge of the CompletedQuestion entity.
func (cq *CompletedQuestion) QueryQuestion() *QuestionQuery {
	return NewCompletedQuestionClient(cq.config).QueryQuestion(cq)
}

// Update returns a builder for updating this CompletedQuestion.
// Note that you need to call CompletedQuestion.Unwrap() before calling this method if this CompletedQuestion
// was returned from a transaction, and the transaction was committed or rolled back.
func (cq *CompletedQuestion) Update() *CompletedQuestionUpdateOne {
	return NewCompletedQuestionClient(cq.config).UpdateOne(cq)
}

// Unwrap unwraps the CompletedQuestion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cq *CompletedQuestion) Unwrap() *CompletedQuestion {
	_tx, ok := cq.config.driver.(*txDriver)
	if !ok {
		panic("ent: CompletedQuestion is not a transactional entity")
	}
	cq.config.driver = _tx.drv
	return cq
}

// String implements the fmt.Stringer.
func (cq *CompletedQuestion) String() string {
	var builder strings.Builder
	builder.WriteString("CompletedQuestion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cq.ID))
	builder.WriteString("started_poll_id=")
	builder.WriteString(fmt.Sprintf("%v", cq.StartedPollID))
	builder.WriteString(", ")
	builder.WriteString("question_id=")
	builder.WriteString(fmt.Sprintf("%v", cq.QuestionID))
	builder.WriteString(", ")
	builder.WriteString("answers=")
	builder.WriteString(fmt.Sprintf("%v", cq.Answers))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cq.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cq.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CompletedQuestions is a parsable slice of CompletedQuestion.
type CompletedQuestions []*CompletedQuestion
