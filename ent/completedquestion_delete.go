// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"poll-app/ent/completedquestion"
	"poll-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompletedQuestionDelete is the builder for deleting a CompletedQuestion entity.
type CompletedQuestionDelete struct {
	config
	hooks    []Hook
	mutation *CompletedQuestionMutation
}

// Where appends a list predicates to the CompletedQuestionDelete builder.
func (cqd *CompletedQuestionDelete) Where(ps ...predicate.CompletedQuestion) *CompletedQuestionDelete {
	cqd.mutation.Where(ps...)
	return cqd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cqd *CompletedQuestionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cqd.sqlExec, cqd.mutation, cqd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cqd *CompletedQuestionDelete) ExecX(ctx context.Context) int {
	n, err := cqd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cqd *CompletedQuestionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(completedquestion.Table, sqlgraph.NewFieldSpec(completedquestion.FieldID, field.TypeInt))
	if ps := cqd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cqd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cqd.mutation.done = true
	return affected, err
}

// CompletedQuestionDeleteOne is the builder for deleting a single CompletedQuestion entity.
type CompletedQuestionDeleteOne struct {
	cqd *CompletedQuestionDelete
}

// Where appends a list predicates to the CompletedQuestionDelete builder.
func (cqdo *CompletedQuestionDeleteOne) Where(ps ...predicate.CompletedQuestion) *CompletedQuestionDeleteOne {
	cqdo.cqd.mutation.Where(ps...)
	return cqdo
}

// Exec executes the deletion query.
func (cqdo *CompletedQuestionDeleteOne) Exec(ctx context.Context) error {
	n, err := cqdo.cqd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{completedquestion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cqdo *CompletedQuestionDeleteOne) ExecX(ctx context.Context) {
	if err := cqdo.Exec(ctx); err != nil {
		panic(err)
	}
}
