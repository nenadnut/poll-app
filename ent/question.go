// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"poll-app/ent/poll"
	"poll-app/ent/question"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Question is the model entity for the Question schema.
type Question struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Head holds the value of the "head" field.
	Head bool `json:"-"`
	// Required holds the value of the "required" field.
	Required bool `json:"required,omitempty"`
	// NumOfAnswers holds the value of the "num_of_answers" field.
	NumOfAnswers int `json:"num_of_answers,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"-"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"-"`
	// PollID holds the value of the "poll_id" field.
	PollID int `json:"poll_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionQuery when eager-loading is set.
	Edges                  QuestionEdges `json:"edges"`
	question_next_question *int
	selectValues           sql.SelectValues
}

// QuestionEdges holds the relations/edges for other nodes in the graph.
type QuestionEdges struct {
	// Options holds the value of the options edge.
	Options []*QuestionOption `json:"options,omitempty"`
	// NextQuestionInv holds the value of the next_question_inv edge.
	NextQuestionInv []*Question `json:"next_question_inv,omitempty"`
	// NextQuestion holds the value of the next_question edge.
	NextQuestion *Question `json:"next_question,omitempty"`
	// Poll holds the value of the poll edge.
	Poll *Poll `json:"poll,omitempty"`
	// CompletedQuestions holds the value of the completed_questions edge.
	CompletedQuestions []*CompletedQuestion `json:"completed_questions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// OptionsOrErr returns the Options value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) OptionsOrErr() ([]*QuestionOption, error) {
	if e.loadedTypes[0] {
		return e.Options, nil
	}
	return nil, &NotLoadedError{edge: "options"}
}

// NextQuestionInvOrErr returns the NextQuestionInv value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) NextQuestionInvOrErr() ([]*Question, error) {
	if e.loadedTypes[1] {
		return e.NextQuestionInv, nil
	}
	return nil, &NotLoadedError{edge: "next_question_inv"}
}

// NextQuestionOrErr returns the NextQuestion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionEdges) NextQuestionOrErr() (*Question, error) {
	if e.loadedTypes[2] {
		if e.NextQuestion == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: question.Label}
		}
		return e.NextQuestion, nil
	}
	return nil, &NotLoadedError{edge: "next_question"}
}

// PollOrErr returns the Poll value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionEdges) PollOrErr() (*Poll, error) {
	if e.loadedTypes[3] {
		if e.Poll == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: poll.Label}
		}
		return e.Poll, nil
	}
	return nil, &NotLoadedError{edge: "poll"}
}

// CompletedQuestionsOrErr returns the CompletedQuestions value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) CompletedQuestionsOrErr() ([]*CompletedQuestion, error) {
	if e.loadedTypes[4] {
		return e.CompletedQuestions, nil
	}
	return nil, &NotLoadedError{edge: "completed_questions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Question) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case question.FieldHead, question.FieldRequired:
			values[i] = new(sql.NullBool)
		case question.FieldID, question.FieldNumOfAnswers, question.FieldPollID:
			values[i] = new(sql.NullInt64)
		case question.FieldTitle, question.FieldText:
			values[i] = new(sql.NullString)
		case question.FieldCreatedAt, question.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case question.ForeignKeys[0]: // question_next_question
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Question fields.
func (q *Question) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case question.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			q.ID = int(value.Int64)
		case question.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				q.Title = value.String
			}
		case question.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				q.Text = value.String
			}
		case question.FieldHead:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field head", values[i])
			} else if value.Valid {
				q.Head = value.Bool
			}
		case question.FieldRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field required", values[i])
			} else if value.Valid {
				q.Required = value.Bool
			}
		case question.FieldNumOfAnswers:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num_of_answers", values[i])
			} else if value.Valid {
				q.NumOfAnswers = int(value.Int64)
			}
		case question.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				q.CreatedAt = value.Time
			}
		case question.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				q.UpdatedAt = value.Time
			}
		case question.FieldPollID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field poll_id", values[i])
			} else if value.Valid {
				q.PollID = int(value.Int64)
			}
		case question.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field question_next_question", value)
			} else if value.Valid {
				q.question_next_question = new(int)
				*q.question_next_question = int(value.Int64)
			}
		default:
			q.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Question.
// This includes values selected through modifiers, order, etc.
func (q *Question) Value(name string) (ent.Value, error) {
	return q.selectValues.Get(name)
}

// QueryOptions queries the "options" edge of the Question entity.
func (q *Question) QueryOptions() *QuestionOptionQuery {
	return NewQuestionClient(q.config).QueryOptions(q)
}

// QueryNextQuestionInv queries the "next_question_inv" edge of the Question entity.
func (q *Question) QueryNextQuestionInv() *QuestionQuery {
	return NewQuestionClient(q.config).QueryNextQuestionInv(q)
}

// QueryNextQuestion queries the "next_question" edge of the Question entity.
func (q *Question) QueryNextQuestion() *QuestionQuery {
	return NewQuestionClient(q.config).QueryNextQuestion(q)
}

// QueryPoll queries the "poll" edge of the Question entity.
func (q *Question) QueryPoll() *PollQuery {
	return NewQuestionClient(q.config).QueryPoll(q)
}

// QueryCompletedQuestions queries the "completed_questions" edge of the Question entity.
func (q *Question) QueryCompletedQuestions() *CompletedQuestionQuery {
	return NewQuestionClient(q.config).QueryCompletedQuestions(q)
}

// Update returns a builder for updating this Question.
// Note that you need to call Question.Unwrap() before calling this method if this Question
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Question) Update() *QuestionUpdateOne {
	return NewQuestionClient(q.config).UpdateOne(q)
}

// Unwrap unwraps the Question entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Question) Unwrap() *Question {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Question is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Question) String() string {
	var builder strings.Builder
	builder.WriteString("Question(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("title=")
	builder.WriteString(q.Title)
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(q.Text)
	builder.WriteString(", ")
	builder.WriteString("head=")
	builder.WriteString(fmt.Sprintf("%v", q.Head))
	builder.WriteString(", ")
	builder.WriteString("required=")
	builder.WriteString(fmt.Sprintf("%v", q.Required))
	builder.WriteString(", ")
	builder.WriteString("num_of_answers=")
	builder.WriteString(fmt.Sprintf("%v", q.NumOfAnswers))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(q.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(q.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("poll_id=")
	builder.WriteString(fmt.Sprintf("%v", q.PollID))
	builder.WriteByte(')')
	return builder.String()
}

// Questions is a parsable slice of Question.
type Questions []*Question
