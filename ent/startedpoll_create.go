// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"poll-app/ent/completedquestion"
	"poll-app/ent/poll"
	"poll-app/ent/startedpoll"
	"poll-app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StartedPollCreate is the builder for creating a StartedPoll entity.
type StartedPollCreate struct {
	config
	mutation *StartedPollMutation
	hooks    []Hook
}

// SetPollID sets the "poll_id" field.
func (spc *StartedPollCreate) SetPollID(i int) *StartedPollCreate {
	spc.mutation.SetPollID(i)
	return spc
}

// SetUserID sets the "user_id" field.
func (spc *StartedPollCreate) SetUserID(i int) *StartedPollCreate {
	spc.mutation.SetUserID(i)
	return spc
}

// SetCompleted sets the "completed" field.
func (spc *StartedPollCreate) SetCompleted(b bool) *StartedPollCreate {
	spc.mutation.SetCompleted(b)
	return spc
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (spc *StartedPollCreate) SetNillableCompleted(b *bool) *StartedPollCreate {
	if b != nil {
		spc.SetCompleted(*b)
	}
	return spc
}

// SetCreatedAt sets the "created_at" field.
func (spc *StartedPollCreate) SetCreatedAt(t time.Time) *StartedPollCreate {
	spc.mutation.SetCreatedAt(t)
	return spc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spc *StartedPollCreate) SetNillableCreatedAt(t *time.Time) *StartedPollCreate {
	if t != nil {
		spc.SetCreatedAt(*t)
	}
	return spc
}

// SetUpdatedAt sets the "updated_at" field.
func (spc *StartedPollCreate) SetUpdatedAt(t time.Time) *StartedPollCreate {
	spc.mutation.SetUpdatedAt(t)
	return spc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spc *StartedPollCreate) SetNillableUpdatedAt(t *time.Time) *StartedPollCreate {
	if t != nil {
		spc.SetUpdatedAt(*t)
	}
	return spc
}

// SetPoll sets the "poll" edge to the Poll entity.
func (spc *StartedPollCreate) SetPoll(p *Poll) *StartedPollCreate {
	return spc.SetPollID(p.ID)
}

// SetUser sets the "user" edge to the User entity.
func (spc *StartedPollCreate) SetUser(u *User) *StartedPollCreate {
	return spc.SetUserID(u.ID)
}

// AddCompletedQuestionIDs adds the "completed_questions" edge to the CompletedQuestion entity by IDs.
func (spc *StartedPollCreate) AddCompletedQuestionIDs(ids ...int) *StartedPollCreate {
	spc.mutation.AddCompletedQuestionIDs(ids...)
	return spc
}

// AddCompletedQuestions adds the "completed_questions" edges to the CompletedQuestion entity.
func (spc *StartedPollCreate) AddCompletedQuestions(c ...*CompletedQuestion) *StartedPollCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spc.AddCompletedQuestionIDs(ids...)
}

// Mutation returns the StartedPollMutation object of the builder.
func (spc *StartedPollCreate) Mutation() *StartedPollMutation {
	return spc.mutation
}

// Save creates the StartedPoll in the database.
func (spc *StartedPollCreate) Save(ctx context.Context) (*StartedPoll, error) {
	spc.defaults()
	return withHooks(ctx, spc.sqlSave, spc.mutation, spc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spc *StartedPollCreate) SaveX(ctx context.Context) *StartedPoll {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *StartedPollCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *StartedPollCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *StartedPollCreate) defaults() {
	if _, ok := spc.mutation.Completed(); !ok {
		v := startedpoll.DefaultCompleted
		spc.mutation.SetCompleted(v)
	}
	if _, ok := spc.mutation.CreatedAt(); !ok {
		v := startedpoll.DefaultCreatedAt()
		spc.mutation.SetCreatedAt(v)
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		v := startedpoll.DefaultUpdatedAt()
		spc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spc *StartedPollCreate) check() error {
	if _, ok := spc.mutation.PollID(); !ok {
		return &ValidationError{Name: "poll_id", err: errors.New(`ent: missing required field "StartedPoll.poll_id"`)}
	}
	if _, ok := spc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "StartedPoll.user_id"`)}
	}
	if _, ok := spc.mutation.Completed(); !ok {
		return &ValidationError{Name: "completed", err: errors.New(`ent: missing required field "StartedPoll.completed"`)}
	}
	if _, ok := spc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StartedPoll.created_at"`)}
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StartedPoll.updated_at"`)}
	}
	if _, ok := spc.mutation.PollID(); !ok {
		return &ValidationError{Name: "poll", err: errors.New(`ent: missing required edge "StartedPoll.poll"`)}
	}
	if _, ok := spc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "StartedPoll.user"`)}
	}
	return nil
}

func (spc *StartedPollCreate) sqlSave(ctx context.Context) (*StartedPoll, error) {
	if err := spc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	spc.mutation.id = &_node.ID
	spc.mutation.done = true
	return _node, nil
}

func (spc *StartedPollCreate) createSpec() (*StartedPoll, *sqlgraph.CreateSpec) {
	var (
		_node = &StartedPoll{config: spc.config}
		_spec = sqlgraph.NewCreateSpec(startedpoll.Table, sqlgraph.NewFieldSpec(startedpoll.FieldID, field.TypeInt))
	)
	if value, ok := spc.mutation.Completed(); ok {
		_spec.SetField(startedpoll.FieldCompleted, field.TypeBool, value)
		_node.Completed = value
	}
	if value, ok := spc.mutation.CreatedAt(); ok {
		_spec.SetField(startedpoll.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := spc.mutation.UpdatedAt(); ok {
		_spec.SetField(startedpoll.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := spc.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   startedpoll.PollTable,
			Columns: []string{startedpoll.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PollID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   startedpoll.UserTable,
			Columns: []string{startedpoll.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.CompletedQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   startedpoll.CompletedQuestionsTable,
			Columns: []string{startedpoll.CompletedQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedquestion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StartedPollCreateBulk is the builder for creating many StartedPoll entities in bulk.
type StartedPollCreateBulk struct {
	config
	err      error
	builders []*StartedPollCreate
}

// Save creates the StartedPoll entities in the database.
func (spcb *StartedPollCreateBulk) Save(ctx context.Context) ([]*StartedPoll, error) {
	if spcb.err != nil {
		return nil, spcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*StartedPoll, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StartedPollMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *StartedPollCreateBulk) SaveX(ctx context.Context) []*StartedPoll {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *StartedPollCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *StartedPollCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}
