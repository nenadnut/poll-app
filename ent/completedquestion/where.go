// Code generated by ent, DO NOT EDIT.

package completedquestion

import (
	"poll-app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldLTE(FieldID, id))
}

// StartedPollID applies equality check predicate on the "started_poll_id" field. It's identical to StartedPollIDEQ.
func StartedPollID(v int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldEQ(FieldStartedPollID, v))
}

// QuestionID applies equality check predicate on the "question_id" field. It's identical to QuestionIDEQ.
func QuestionID(v int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldEQ(FieldQuestionID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldEQ(FieldUpdatedAt, v))
}

// StartedPollIDEQ applies the EQ predicate on the "started_poll_id" field.
func StartedPollIDEQ(v int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldEQ(FieldStartedPollID, v))
}

// StartedPollIDNEQ applies the NEQ predicate on the "started_poll_id" field.
func StartedPollIDNEQ(v int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldNEQ(FieldStartedPollID, v))
}

// StartedPollIDIn applies the In predicate on the "started_poll_id" field.
func StartedPollIDIn(vs ...int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldIn(FieldStartedPollID, vs...))
}

// StartedPollIDNotIn applies the NotIn predicate on the "started_poll_id" field.
func StartedPollIDNotIn(vs ...int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldNotIn(FieldStartedPollID, vs...))
}

// QuestionIDEQ applies the EQ predicate on the "question_id" field.
func QuestionIDEQ(v int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldEQ(FieldQuestionID, v))
}

// QuestionIDNEQ applies the NEQ predicate on the "question_id" field.
func QuestionIDNEQ(v int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldNEQ(FieldQuestionID, v))
}

// QuestionIDIn applies the In predicate on the "question_id" field.
func QuestionIDIn(vs ...int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldIn(FieldQuestionID, vs...))
}

// QuestionIDNotIn applies the NotIn predicate on the "question_id" field.
func QuestionIDNotIn(vs ...int) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldNotIn(FieldQuestionID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasStartedPoll applies the HasEdge predicate on the "started_poll" edge.
func HasStartedPoll() predicate.CompletedQuestion {
	return predicate.CompletedQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StartedPollTable, StartedPollColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStartedPollWith applies the HasEdge predicate on the "started_poll" edge with a given conditions (other predicates).
func HasStartedPollWith(preds ...predicate.StartedPoll) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(func(s *sql.Selector) {
		step := newStartedPollStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.CompletedQuestion {
	return predicate.CompletedQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.Question) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(func(s *sql.Selector) {
		step := newQuestionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CompletedQuestion) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CompletedQuestion) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CompletedQuestion) predicate.CompletedQuestion {
	return predicate.CompletedQuestion(sql.NotPredicates(p))
}
