// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"poll-app/ent/predicate"
	"poll-app/ent/question"
	"poll-app/ent/questionoption"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionOptionQuery is the builder for querying QuestionOption entities.
type QuestionOptionQuery struct {
	config
	ctx               *QueryContext
	order             []questionoption.OrderOption
	inters            []Interceptor
	predicates        []predicate.QuestionOption
	withNextOptionInv *QuestionOptionQuery
	withNextOption    *QuestionOptionQuery
	withQuestion      *QuestionQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the QuestionOptionQuery builder.
func (qoq *QuestionOptionQuery) Where(ps ...predicate.QuestionOption) *QuestionOptionQuery {
	qoq.predicates = append(qoq.predicates, ps...)
	return qoq
}

// Limit the number of records to be returned by this query.
func (qoq *QuestionOptionQuery) Limit(limit int) *QuestionOptionQuery {
	qoq.ctx.Limit = &limit
	return qoq
}

// Offset to start from.
func (qoq *QuestionOptionQuery) Offset(offset int) *QuestionOptionQuery {
	qoq.ctx.Offset = &offset
	return qoq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (qoq *QuestionOptionQuery) Unique(unique bool) *QuestionOptionQuery {
	qoq.ctx.Unique = &unique
	return qoq
}

// Order specifies how the records should be ordered.
func (qoq *QuestionOptionQuery) Order(o ...questionoption.OrderOption) *QuestionOptionQuery {
	qoq.order = append(qoq.order, o...)
	return qoq
}

// QueryNextOptionInv chains the current query on the "next_option_inv" edge.
func (qoq *QuestionOptionQuery) QueryNextOptionInv() *QuestionOptionQuery {
	query := (&QuestionOptionClient{config: qoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(questionoption.Table, questionoption.FieldID, selector),
			sqlgraph.To(questionoption.Table, questionoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, questionoption.NextOptionInvTable, questionoption.NextOptionInvColumn),
		)
		fromU = sqlgraph.SetNeighbors(qoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNextOption chains the current query on the "next_option" edge.
func (qoq *QuestionOptionQuery) QueryNextOption() *QuestionOptionQuery {
	query := (&QuestionOptionClient{config: qoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(questionoption.Table, questionoption.FieldID, selector),
			sqlgraph.To(questionoption.Table, questionoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, questionoption.NextOptionTable, questionoption.NextOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(qoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestion chains the current query on the "question" edge.
func (qoq *QuestionOptionQuery) QueryQuestion() *QuestionQuery {
	query := (&QuestionClient{config: qoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(questionoption.Table, questionoption.FieldID, selector),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, questionoption.QuestionTable, questionoption.QuestionColumn),
		)
		fromU = sqlgraph.SetNeighbors(qoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first QuestionOption entity from the query.
// Returns a *NotFoundError when no QuestionOption was found.
func (qoq *QuestionOptionQuery) First(ctx context.Context) (*QuestionOption, error) {
	nodes, err := qoq.Limit(1).All(setContextOp(ctx, qoq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{questionoption.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (qoq *QuestionOptionQuery) FirstX(ctx context.Context) *QuestionOption {
	node, err := qoq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first QuestionOption ID from the query.
// Returns a *NotFoundError when no QuestionOption ID was found.
func (qoq *QuestionOptionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = qoq.Limit(1).IDs(setContextOp(ctx, qoq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{questionoption.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (qoq *QuestionOptionQuery) FirstIDX(ctx context.Context) int {
	id, err := qoq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single QuestionOption entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one QuestionOption entity is found.
// Returns a *NotFoundError when no QuestionOption entities are found.
func (qoq *QuestionOptionQuery) Only(ctx context.Context) (*QuestionOption, error) {
	nodes, err := qoq.Limit(2).All(setContextOp(ctx, qoq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{questionoption.Label}
	default:
		return nil, &NotSingularError{questionoption.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (qoq *QuestionOptionQuery) OnlyX(ctx context.Context) *QuestionOption {
	node, err := qoq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only QuestionOption ID in the query.
// Returns a *NotSingularError when more than one QuestionOption ID is found.
// Returns a *NotFoundError when no entities are found.
func (qoq *QuestionOptionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = qoq.Limit(2).IDs(setContextOp(ctx, qoq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{questionoption.Label}
	default:
		err = &NotSingularError{questionoption.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (qoq *QuestionOptionQuery) OnlyIDX(ctx context.Context) int {
	id, err := qoq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of QuestionOptions.
func (qoq *QuestionOptionQuery) All(ctx context.Context) ([]*QuestionOption, error) {
	ctx = setContextOp(ctx, qoq.ctx, "All")
	if err := qoq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*QuestionOption, *QuestionOptionQuery]()
	return withInterceptors[[]*QuestionOption](ctx, qoq, qr, qoq.inters)
}

// AllX is like All, but panics if an error occurs.
func (qoq *QuestionOptionQuery) AllX(ctx context.Context) []*QuestionOption {
	nodes, err := qoq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of QuestionOption IDs.
func (qoq *QuestionOptionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if qoq.ctx.Unique == nil && qoq.path != nil {
		qoq.Unique(true)
	}
	ctx = setContextOp(ctx, qoq.ctx, "IDs")
	if err = qoq.Select(questionoption.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (qoq *QuestionOptionQuery) IDsX(ctx context.Context) []int {
	ids, err := qoq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (qoq *QuestionOptionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, qoq.ctx, "Count")
	if err := qoq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, qoq, querierCount[*QuestionOptionQuery](), qoq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (qoq *QuestionOptionQuery) CountX(ctx context.Context) int {
	count, err := qoq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (qoq *QuestionOptionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, qoq.ctx, "Exist")
	switch _, err := qoq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (qoq *QuestionOptionQuery) ExistX(ctx context.Context) bool {
	exist, err := qoq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the QuestionOptionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (qoq *QuestionOptionQuery) Clone() *QuestionOptionQuery {
	if qoq == nil {
		return nil
	}
	return &QuestionOptionQuery{
		config:            qoq.config,
		ctx:               qoq.ctx.Clone(),
		order:             append([]questionoption.OrderOption{}, qoq.order...),
		inters:            append([]Interceptor{}, qoq.inters...),
		predicates:        append([]predicate.QuestionOption{}, qoq.predicates...),
		withNextOptionInv: qoq.withNextOptionInv.Clone(),
		withNextOption:    qoq.withNextOption.Clone(),
		withQuestion:      qoq.withQuestion.Clone(),
		// clone intermediate query.
		sql:  qoq.sql.Clone(),
		path: qoq.path,
	}
}

// WithNextOptionInv tells the query-builder to eager-load the nodes that are connected to
// the "next_option_inv" edge. The optional arguments are used to configure the query builder of the edge.
func (qoq *QuestionOptionQuery) WithNextOptionInv(opts ...func(*QuestionOptionQuery)) *QuestionOptionQuery {
	query := (&QuestionOptionClient{config: qoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qoq.withNextOptionInv = query
	return qoq
}

// WithNextOption tells the query-builder to eager-load the nodes that are connected to
// the "next_option" edge. The optional arguments are used to configure the query builder of the edge.
func (qoq *QuestionOptionQuery) WithNextOption(opts ...func(*QuestionOptionQuery)) *QuestionOptionQuery {
	query := (&QuestionOptionClient{config: qoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qoq.withNextOption = query
	return qoq
}

// WithQuestion tells the query-builder to eager-load the nodes that are connected to
// the "question" edge. The optional arguments are used to configure the query builder of the edge.
func (qoq *QuestionOptionQuery) WithQuestion(opts ...func(*QuestionQuery)) *QuestionOptionQuery {
	query := (&QuestionClient{config: qoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qoq.withQuestion = query
	return qoq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Text string `json:"text,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.QuestionOption.Query().
//		GroupBy(questionoption.FieldText).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (qoq *QuestionOptionQuery) GroupBy(field string, fields ...string) *QuestionOptionGroupBy {
	qoq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &QuestionOptionGroupBy{build: qoq}
	grbuild.flds = &qoq.ctx.Fields
	grbuild.label = questionoption.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Text string `json:"text,omitempty"`
//	}
//
//	client.QuestionOption.Query().
//		Select(questionoption.FieldText).
//		Scan(ctx, &v)
func (qoq *QuestionOptionQuery) Select(fields ...string) *QuestionOptionSelect {
	qoq.ctx.Fields = append(qoq.ctx.Fields, fields...)
	sbuild := &QuestionOptionSelect{QuestionOptionQuery: qoq}
	sbuild.label = questionoption.Label
	sbuild.flds, sbuild.scan = &qoq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a QuestionOptionSelect configured with the given aggregations.
func (qoq *QuestionOptionQuery) Aggregate(fns ...AggregateFunc) *QuestionOptionSelect {
	return qoq.Select().Aggregate(fns...)
}

func (qoq *QuestionOptionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range qoq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, qoq); err != nil {
				return err
			}
		}
	}
	for _, f := range qoq.ctx.Fields {
		if !questionoption.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if qoq.path != nil {
		prev, err := qoq.path(ctx)
		if err != nil {
			return err
		}
		qoq.sql = prev
	}
	return nil
}

func (qoq *QuestionOptionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*QuestionOption, error) {
	var (
		nodes       = []*QuestionOption{}
		withFKs     = qoq.withFKs
		_spec       = qoq.querySpec()
		loadedTypes = [3]bool{
			qoq.withNextOptionInv != nil,
			qoq.withNextOption != nil,
			qoq.withQuestion != nil,
		}
	)
	if qoq.withNextOptionInv != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, questionoption.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*QuestionOption).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &QuestionOption{config: qoq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, qoq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := qoq.withNextOptionInv; query != nil {
		if err := qoq.loadNextOptionInv(ctx, query, nodes, nil,
			func(n *QuestionOption, e *QuestionOption) { n.Edges.NextOptionInv = e }); err != nil {
			return nil, err
		}
	}
	if query := qoq.withNextOption; query != nil {
		if err := qoq.loadNextOption(ctx, query, nodes, nil,
			func(n *QuestionOption, e *QuestionOption) { n.Edges.NextOption = e }); err != nil {
			return nil, err
		}
	}
	if query := qoq.withQuestion; query != nil {
		if err := qoq.loadQuestion(ctx, query, nodes, nil,
			func(n *QuestionOption, e *Question) { n.Edges.Question = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (qoq *QuestionOptionQuery) loadNextOptionInv(ctx context.Context, query *QuestionOptionQuery, nodes []*QuestionOption, init func(*QuestionOption), assign func(*QuestionOption, *QuestionOption)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*QuestionOption)
	for i := range nodes {
		if nodes[i].question_option_next_option == nil {
			continue
		}
		fk := *nodes[i].question_option_next_option
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(questionoption.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "question_option_next_option" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (qoq *QuestionOptionQuery) loadNextOption(ctx context.Context, query *QuestionOptionQuery, nodes []*QuestionOption, init func(*QuestionOption), assign func(*QuestionOption, *QuestionOption)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*QuestionOption)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.QuestionOption(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(questionoption.NextOptionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.question_option_next_option
		if fk == nil {
			return fmt.Errorf(`foreign-key "question_option_next_option" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "question_option_next_option" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (qoq *QuestionOptionQuery) loadQuestion(ctx context.Context, query *QuestionQuery, nodes []*QuestionOption, init func(*QuestionOption), assign func(*QuestionOption, *Question)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*QuestionOption)
	for i := range nodes {
		fk := nodes[i].QuestionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(question.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "question_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (qoq *QuestionOptionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := qoq.querySpec()
	_spec.Node.Columns = qoq.ctx.Fields
	if len(qoq.ctx.Fields) > 0 {
		_spec.Unique = qoq.ctx.Unique != nil && *qoq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, qoq.driver, _spec)
}

func (qoq *QuestionOptionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(questionoption.Table, questionoption.Columns, sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeInt))
	_spec.From = qoq.sql
	if unique := qoq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if qoq.path != nil {
		_spec.Unique = true
	}
	if fields := qoq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, questionoption.FieldID)
		for i := range fields {
			if fields[i] != questionoption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if qoq.withQuestion != nil {
			_spec.Node.AddColumnOnce(questionoption.FieldQuestionID)
		}
	}
	if ps := qoq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := qoq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := qoq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := qoq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (qoq *QuestionOptionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(qoq.driver.Dialect())
	t1 := builder.Table(questionoption.Table)
	columns := qoq.ctx.Fields
	if len(columns) == 0 {
		columns = questionoption.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if qoq.sql != nil {
		selector = qoq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if qoq.ctx.Unique != nil && *qoq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range qoq.predicates {
		p(selector)
	}
	for _, p := range qoq.order {
		p(selector)
	}
	if offset := qoq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := qoq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// QuestionOptionGroupBy is the group-by builder for QuestionOption entities.
type QuestionOptionGroupBy struct {
	selector
	build *QuestionOptionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (qogb *QuestionOptionGroupBy) Aggregate(fns ...AggregateFunc) *QuestionOptionGroupBy {
	qogb.fns = append(qogb.fns, fns...)
	return qogb
}

// Scan applies the selector query and scans the result into the given value.
func (qogb *QuestionOptionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, qogb.build.ctx, "GroupBy")
	if err := qogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*QuestionOptionQuery, *QuestionOptionGroupBy](ctx, qogb.build, qogb, qogb.build.inters, v)
}

func (qogb *QuestionOptionGroupBy) sqlScan(ctx context.Context, root *QuestionOptionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(qogb.fns))
	for _, fn := range qogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*qogb.flds)+len(qogb.fns))
		for _, f := range *qogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*qogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// QuestionOptionSelect is the builder for selecting fields of QuestionOption entities.
type QuestionOptionSelect struct {
	*QuestionOptionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (qos *QuestionOptionSelect) Aggregate(fns ...AggregateFunc) *QuestionOptionSelect {
	qos.fns = append(qos.fns, fns...)
	return qos
}

// Scan applies the selector query and scans the result into the given value.
func (qos *QuestionOptionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, qos.ctx, "Select")
	if err := qos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*QuestionOptionQuery, *QuestionOptionSelect](ctx, qos.QuestionOptionQuery, qos, qos.inters, v)
}

func (qos *QuestionOptionSelect) sqlScan(ctx context.Context, root *QuestionOptionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(qos.fns))
	for _, fn := range qos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*qos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
