// Code generated by ent, DO NOT EDIT.

package questionoption

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the questionoption type in the database.
	Label = "question_option"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldChosen holds the string denoting the chosen field in the database.
	FieldChosen = "chosen"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldQuestionID holds the string denoting the question_id field in the database.
	FieldQuestionID = "question_id"
	// EdgeNextOptionInv holds the string denoting the next_option_inv edge name in mutations.
	EdgeNextOptionInv = "next_option_inv"
	// EdgeNextOption holds the string denoting the next_option edge name in mutations.
	EdgeNextOption = "next_option"
	// EdgeQuestion holds the string denoting the question edge name in mutations.
	EdgeQuestion = "question"
	// Table holds the table name of the questionoption in the database.
	Table = "question_options"
	// NextOptionInvTable is the table that holds the next_option_inv relation/edge.
	NextOptionInvTable = "question_options"
	// NextOptionInvColumn is the table column denoting the next_option_inv relation/edge.
	NextOptionInvColumn = "question_option_next_option"
	// NextOptionTable is the table that holds the next_option relation/edge.
	NextOptionTable = "question_options"
	// NextOptionColumn is the table column denoting the next_option relation/edge.
	NextOptionColumn = "question_option_next_option"
	// QuestionTable is the table that holds the question relation/edge.
	QuestionTable = "question_options"
	// QuestionInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionInverseTable = "questions"
	// QuestionColumn is the table column denoting the question relation/edge.
	QuestionColumn = "question_id"
)

// Columns holds all SQL columns for questionoption fields.
var Columns = []string{
	FieldID,
	FieldText,
	FieldChosen,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldQuestionID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "question_options"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"question_option_next_option",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultChosen holds the default value on creation for the "chosen" field.
	DefaultChosen bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the QuestionOption queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByChosen orders the results by the chosen field.
func ByChosen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChosen, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByQuestionID orders the results by the question_id field.
func ByQuestionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuestionID, opts...).ToFunc()
}

// ByNextOptionInvField orders the results by next_option_inv field.
func ByNextOptionInvField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNextOptionInvStep(), sql.OrderByField(field, opts...))
	}
}

// ByNextOptionField orders the results by next_option field.
func ByNextOptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNextOptionStep(), sql.OrderByField(field, opts...))
	}
}

// ByQuestionField orders the results by question field.
func ByQuestionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionStep(), sql.OrderByField(field, opts...))
	}
}
func newNextOptionInvStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, NextOptionInvTable, NextOptionInvColumn),
	)
}
func newNextOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, NextOptionTable, NextOptionColumn),
	)
}
func newQuestionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
	)
}
