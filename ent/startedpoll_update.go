// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"poll-app/ent/completedquestion"
	"poll-app/ent/poll"
	"poll-app/ent/predicate"
	"poll-app/ent/startedpoll"
	"poll-app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StartedPollUpdate is the builder for updating StartedPoll entities.
type StartedPollUpdate struct {
	config
	hooks    []Hook
	mutation *StartedPollMutation
}

// Where appends a list predicates to the StartedPollUpdate builder.
func (spu *StartedPollUpdate) Where(ps ...predicate.StartedPoll) *StartedPollUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetPollID sets the "poll_id" field.
func (spu *StartedPollUpdate) SetPollID(i int) *StartedPollUpdate {
	spu.mutation.SetPollID(i)
	return spu
}

// SetNillablePollID sets the "poll_id" field if the given value is not nil.
func (spu *StartedPollUpdate) SetNillablePollID(i *int) *StartedPollUpdate {
	if i != nil {
		spu.SetPollID(*i)
	}
	return spu
}

// SetUserID sets the "user_id" field.
func (spu *StartedPollUpdate) SetUserID(i int) *StartedPollUpdate {
	spu.mutation.SetUserID(i)
	return spu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (spu *StartedPollUpdate) SetNillableUserID(i *int) *StartedPollUpdate {
	if i != nil {
		spu.SetUserID(*i)
	}
	return spu
}

// SetCompleted sets the "completed" field.
func (spu *StartedPollUpdate) SetCompleted(b bool) *StartedPollUpdate {
	spu.mutation.SetCompleted(b)
	return spu
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (spu *StartedPollUpdate) SetNillableCompleted(b *bool) *StartedPollUpdate {
	if b != nil {
		spu.SetCompleted(*b)
	}
	return spu
}

// SetCreatedAt sets the "created_at" field.
func (spu *StartedPollUpdate) SetCreatedAt(t time.Time) *StartedPollUpdate {
	spu.mutation.SetCreatedAt(t)
	return spu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spu *StartedPollUpdate) SetNillableCreatedAt(t *time.Time) *StartedPollUpdate {
	if t != nil {
		spu.SetCreatedAt(*t)
	}
	return spu
}

// SetUpdatedAt sets the "updated_at" field.
func (spu *StartedPollUpdate) SetUpdatedAt(t time.Time) *StartedPollUpdate {
	spu.mutation.SetUpdatedAt(t)
	return spu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spu *StartedPollUpdate) SetNillableUpdatedAt(t *time.Time) *StartedPollUpdate {
	if t != nil {
		spu.SetUpdatedAt(*t)
	}
	return spu
}

// SetPoll sets the "poll" edge to the Poll entity.
func (spu *StartedPollUpdate) SetPoll(p *Poll) *StartedPollUpdate {
	return spu.SetPollID(p.ID)
}

// SetUser sets the "user" edge to the User entity.
func (spu *StartedPollUpdate) SetUser(u *User) *StartedPollUpdate {
	return spu.SetUserID(u.ID)
}

// AddCompletedQuestionIDs adds the "completed_questions" edge to the CompletedQuestion entity by IDs.
func (spu *StartedPollUpdate) AddCompletedQuestionIDs(ids ...int) *StartedPollUpdate {
	spu.mutation.AddCompletedQuestionIDs(ids...)
	return spu
}

// AddCompletedQuestions adds the "completed_questions" edges to the CompletedQuestion entity.
func (spu *StartedPollUpdate) AddCompletedQuestions(c ...*CompletedQuestion) *StartedPollUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spu.AddCompletedQuestionIDs(ids...)
}

// Mutation returns the StartedPollMutation object of the builder.
func (spu *StartedPollUpdate) Mutation() *StartedPollMutation {
	return spu.mutation
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (spu *StartedPollUpdate) ClearPoll() *StartedPollUpdate {
	spu.mutation.ClearPoll()
	return spu
}

// ClearUser clears the "user" edge to the User entity.
func (spu *StartedPollUpdate) ClearUser() *StartedPollUpdate {
	spu.mutation.ClearUser()
	return spu
}

// ClearCompletedQuestions clears all "completed_questions" edges to the CompletedQuestion entity.
func (spu *StartedPollUpdate) ClearCompletedQuestions() *StartedPollUpdate {
	spu.mutation.ClearCompletedQuestions()
	return spu
}

// RemoveCompletedQuestionIDs removes the "completed_questions" edge to CompletedQuestion entities by IDs.
func (spu *StartedPollUpdate) RemoveCompletedQuestionIDs(ids ...int) *StartedPollUpdate {
	spu.mutation.RemoveCompletedQuestionIDs(ids...)
	return spu
}

// RemoveCompletedQuestions removes "completed_questions" edges to CompletedQuestion entities.
func (spu *StartedPollUpdate) RemoveCompletedQuestions(c ...*CompletedQuestion) *StartedPollUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spu.RemoveCompletedQuestionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *StartedPollUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *StartedPollUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *StartedPollUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *StartedPollUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *StartedPollUpdate) check() error {
	if _, ok := spu.mutation.PollID(); spu.mutation.PollCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StartedPoll.poll"`)
	}
	if _, ok := spu.mutation.UserID(); spu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StartedPoll.user"`)
	}
	return nil
}

func (spu *StartedPollUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(startedpoll.Table, startedpoll.Columns, sqlgraph.NewFieldSpec(startedpoll.FieldID, field.TypeInt))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.Completed(); ok {
		_spec.SetField(startedpoll.FieldCompleted, field.TypeBool, value)
	}
	if value, ok := spu.mutation.CreatedAt(); ok {
		_spec.SetField(startedpoll.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.SetField(startedpoll.FieldUpdatedAt, field.TypeTime, value)
	}
	if spu.mutation.PollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   startedpoll.PollTable,
			Columns: []string{startedpoll.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   startedpoll.PollTable,
			Columns: []string{startedpoll.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   startedpoll.UserTable,
			Columns: []string{startedpoll.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   startedpoll.UserTable,
			Columns: []string{startedpoll.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.CompletedQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   startedpoll.CompletedQuestionsTable,
			Columns: []string{startedpoll.CompletedQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedquestion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedCompletedQuestionsIDs(); len(nodes) > 0 && !spu.mutation.CompletedQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   startedpoll.CompletedQuestionsTable,
			Columns: []string{startedpoll.CompletedQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedquestion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.CompletedQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   startedpoll.CompletedQuestionsTable,
			Columns: []string{startedpoll.CompletedQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedquestion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{startedpoll.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// StartedPollUpdateOne is the builder for updating a single StartedPoll entity.
type StartedPollUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StartedPollMutation
}

// SetPollID sets the "poll_id" field.
func (spuo *StartedPollUpdateOne) SetPollID(i int) *StartedPollUpdateOne {
	spuo.mutation.SetPollID(i)
	return spuo
}

// SetNillablePollID sets the "poll_id" field if the given value is not nil.
func (spuo *StartedPollUpdateOne) SetNillablePollID(i *int) *StartedPollUpdateOne {
	if i != nil {
		spuo.SetPollID(*i)
	}
	return spuo
}

// SetUserID sets the "user_id" field.
func (spuo *StartedPollUpdateOne) SetUserID(i int) *StartedPollUpdateOne {
	spuo.mutation.SetUserID(i)
	return spuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (spuo *StartedPollUpdateOne) SetNillableUserID(i *int) *StartedPollUpdateOne {
	if i != nil {
		spuo.SetUserID(*i)
	}
	return spuo
}

// SetCompleted sets the "completed" field.
func (spuo *StartedPollUpdateOne) SetCompleted(b bool) *StartedPollUpdateOne {
	spuo.mutation.SetCompleted(b)
	return spuo
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (spuo *StartedPollUpdateOne) SetNillableCompleted(b *bool) *StartedPollUpdateOne {
	if b != nil {
		spuo.SetCompleted(*b)
	}
	return spuo
}

// SetCreatedAt sets the "created_at" field.
func (spuo *StartedPollUpdateOne) SetCreatedAt(t time.Time) *StartedPollUpdateOne {
	spuo.mutation.SetCreatedAt(t)
	return spuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spuo *StartedPollUpdateOne) SetNillableCreatedAt(t *time.Time) *StartedPollUpdateOne {
	if t != nil {
		spuo.SetCreatedAt(*t)
	}
	return spuo
}

// SetUpdatedAt sets the "updated_at" field.
func (spuo *StartedPollUpdateOne) SetUpdatedAt(t time.Time) *StartedPollUpdateOne {
	spuo.mutation.SetUpdatedAt(t)
	return spuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spuo *StartedPollUpdateOne) SetNillableUpdatedAt(t *time.Time) *StartedPollUpdateOne {
	if t != nil {
		spuo.SetUpdatedAt(*t)
	}
	return spuo
}

// SetPoll sets the "poll" edge to the Poll entity.
func (spuo *StartedPollUpdateOne) SetPoll(p *Poll) *StartedPollUpdateOne {
	return spuo.SetPollID(p.ID)
}

// SetUser sets the "user" edge to the User entity.
func (spuo *StartedPollUpdateOne) SetUser(u *User) *StartedPollUpdateOne {
	return spuo.SetUserID(u.ID)
}

// AddCompletedQuestionIDs adds the "completed_questions" edge to the CompletedQuestion entity by IDs.
func (spuo *StartedPollUpdateOne) AddCompletedQuestionIDs(ids ...int) *StartedPollUpdateOne {
	spuo.mutation.AddCompletedQuestionIDs(ids...)
	return spuo
}

// AddCompletedQuestions adds the "completed_questions" edges to the CompletedQuestion entity.
func (spuo *StartedPollUpdateOne) AddCompletedQuestions(c ...*CompletedQuestion) *StartedPollUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spuo.AddCompletedQuestionIDs(ids...)
}

// Mutation returns the StartedPollMutation object of the builder.
func (spuo *StartedPollUpdateOne) Mutation() *StartedPollMutation {
	return spuo.mutation
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (spuo *StartedPollUpdateOne) ClearPoll() *StartedPollUpdateOne {
	spuo.mutation.ClearPoll()
	return spuo
}

// ClearUser clears the "user" edge to the User entity.
func (spuo *StartedPollUpdateOne) ClearUser() *StartedPollUpdateOne {
	spuo.mutation.ClearUser()
	return spuo
}

// ClearCompletedQuestions clears all "completed_questions" edges to the CompletedQuestion entity.
func (spuo *StartedPollUpdateOne) ClearCompletedQuestions() *StartedPollUpdateOne {
	spuo.mutation.ClearCompletedQuestions()
	return spuo
}

// RemoveCompletedQuestionIDs removes the "completed_questions" edge to CompletedQuestion entities by IDs.
func (spuo *StartedPollUpdateOne) RemoveCompletedQuestionIDs(ids ...int) *StartedPollUpdateOne {
	spuo.mutation.RemoveCompletedQuestionIDs(ids...)
	return spuo
}

// RemoveCompletedQuestions removes "completed_questions" edges to CompletedQuestion entities.
func (spuo *StartedPollUpdateOne) RemoveCompletedQuestions(c ...*CompletedQuestion) *StartedPollUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spuo.RemoveCompletedQuestionIDs(ids...)
}

// Where appends a list predicates to the StartedPollUpdate builder.
func (spuo *StartedPollUpdateOne) Where(ps ...predicate.StartedPoll) *StartedPollUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *StartedPollUpdateOne) Select(field string, fields ...string) *StartedPollUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated StartedPoll entity.
func (spuo *StartedPollUpdateOne) Save(ctx context.Context) (*StartedPoll, error) {
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *StartedPollUpdateOne) SaveX(ctx context.Context) *StartedPoll {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *StartedPollUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *StartedPollUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *StartedPollUpdateOne) check() error {
	if _, ok := spuo.mutation.PollID(); spuo.mutation.PollCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StartedPoll.poll"`)
	}
	if _, ok := spuo.mutation.UserID(); spuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StartedPoll.user"`)
	}
	return nil
}

func (spuo *StartedPollUpdateOne) sqlSave(ctx context.Context) (_node *StartedPoll, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(startedpoll.Table, startedpoll.Columns, sqlgraph.NewFieldSpec(startedpoll.FieldID, field.TypeInt))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StartedPoll.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, startedpoll.FieldID)
		for _, f := range fields {
			if !startedpoll.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != startedpoll.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.Completed(); ok {
		_spec.SetField(startedpoll.FieldCompleted, field.TypeBool, value)
	}
	if value, ok := spuo.mutation.CreatedAt(); ok {
		_spec.SetField(startedpoll.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.SetField(startedpoll.FieldUpdatedAt, field.TypeTime, value)
	}
	if spuo.mutation.PollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   startedpoll.PollTable,
			Columns: []string{startedpoll.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   startedpoll.PollTable,
			Columns: []string{startedpoll.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   startedpoll.UserTable,
			Columns: []string{startedpoll.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   startedpoll.UserTable,
			Columns: []string{startedpoll.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.CompletedQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   startedpoll.CompletedQuestionsTable,
			Columns: []string{startedpoll.CompletedQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedquestion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedCompletedQuestionsIDs(); len(nodes) > 0 && !spuo.mutation.CompletedQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   startedpoll.CompletedQuestionsTable,
			Columns: []string{startedpoll.CompletedQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedquestion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.CompletedQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   startedpoll.CompletedQuestionsTable,
			Columns: []string{startedpoll.CompletedQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedquestion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StartedPoll{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{startedpoll.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
