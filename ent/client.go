// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"poll-app/ent/migrate"

	"poll-app/ent/completedquestion"
	"poll-app/ent/poll"
	"poll-app/ent/question"
	"poll-app/ent/questionoption"
	"poll-app/ent/startedpoll"
	"poll-app/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CompletedQuestion is the client for interacting with the CompletedQuestion builders.
	CompletedQuestion *CompletedQuestionClient
	// Poll is the client for interacting with the Poll builders.
	Poll *PollClient
	// Question is the client for interacting with the Question builders.
	Question *QuestionClient
	// QuestionOption is the client for interacting with the QuestionOption builders.
	QuestionOption *QuestionOptionClient
	// StartedPoll is the client for interacting with the StartedPoll builders.
	StartedPoll *StartedPollClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CompletedQuestion = NewCompletedQuestionClient(c.config)
	c.Poll = NewPollClient(c.config)
	c.Question = NewQuestionClient(c.config)
	c.QuestionOption = NewQuestionOptionClient(c.config)
	c.StartedPoll = NewStartedPollClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		CompletedQuestion: NewCompletedQuestionClient(cfg),
		Poll:              NewPollClient(cfg),
		Question:          NewQuestionClient(cfg),
		QuestionOption:    NewQuestionOptionClient(cfg),
		StartedPoll:       NewStartedPollClient(cfg),
		User:              NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		CompletedQuestion: NewCompletedQuestionClient(cfg),
		Poll:              NewPollClient(cfg),
		Question:          NewQuestionClient(cfg),
		QuestionOption:    NewQuestionOptionClient(cfg),
		StartedPoll:       NewStartedPollClient(cfg),
		User:              NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CompletedQuestion.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.CompletedQuestion, c.Poll, c.Question, c.QuestionOption, c.StartedPoll,
		c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.CompletedQuestion, c.Poll, c.Question, c.QuestionOption, c.StartedPoll,
		c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CompletedQuestionMutation:
		return c.CompletedQuestion.mutate(ctx, m)
	case *PollMutation:
		return c.Poll.mutate(ctx, m)
	case *QuestionMutation:
		return c.Question.mutate(ctx, m)
	case *QuestionOptionMutation:
		return c.QuestionOption.mutate(ctx, m)
	case *StartedPollMutation:
		return c.StartedPoll.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CompletedQuestionClient is a client for the CompletedQuestion schema.
type CompletedQuestionClient struct {
	config
}

// NewCompletedQuestionClient returns a client for the CompletedQuestion from the given config.
func NewCompletedQuestionClient(c config) *CompletedQuestionClient {
	return &CompletedQuestionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `completedquestion.Hooks(f(g(h())))`.
func (c *CompletedQuestionClient) Use(hooks ...Hook) {
	c.hooks.CompletedQuestion = append(c.hooks.CompletedQuestion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `completedquestion.Intercept(f(g(h())))`.
func (c *CompletedQuestionClient) Intercept(interceptors ...Interceptor) {
	c.inters.CompletedQuestion = append(c.inters.CompletedQuestion, interceptors...)
}

// Create returns a builder for creating a CompletedQuestion entity.
func (c *CompletedQuestionClient) Create() *CompletedQuestionCreate {
	mutation := newCompletedQuestionMutation(c.config, OpCreate)
	return &CompletedQuestionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CompletedQuestion entities.
func (c *CompletedQuestionClient) CreateBulk(builders ...*CompletedQuestionCreate) *CompletedQuestionCreateBulk {
	return &CompletedQuestionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CompletedQuestionClient) MapCreateBulk(slice any, setFunc func(*CompletedQuestionCreate, int)) *CompletedQuestionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CompletedQuestionCreateBulk{err: fmt.Errorf("calling to CompletedQuestionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CompletedQuestionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CompletedQuestionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CompletedQuestion.
func (c *CompletedQuestionClient) Update() *CompletedQuestionUpdate {
	mutation := newCompletedQuestionMutation(c.config, OpUpdate)
	return &CompletedQuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompletedQuestionClient) UpdateOne(cq *CompletedQuestion) *CompletedQuestionUpdateOne {
	mutation := newCompletedQuestionMutation(c.config, OpUpdateOne, withCompletedQuestion(cq))
	return &CompletedQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompletedQuestionClient) UpdateOneID(id int) *CompletedQuestionUpdateOne {
	mutation := newCompletedQuestionMutation(c.config, OpUpdateOne, withCompletedQuestionID(id))
	return &CompletedQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CompletedQuestion.
func (c *CompletedQuestionClient) Delete() *CompletedQuestionDelete {
	mutation := newCompletedQuestionMutation(c.config, OpDelete)
	return &CompletedQuestionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompletedQuestionClient) DeleteOne(cq *CompletedQuestion) *CompletedQuestionDeleteOne {
	return c.DeleteOneID(cq.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CompletedQuestionClient) DeleteOneID(id int) *CompletedQuestionDeleteOne {
	builder := c.Delete().Where(completedquestion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompletedQuestionDeleteOne{builder}
}

// Query returns a query builder for CompletedQuestion.
func (c *CompletedQuestionClient) Query() *CompletedQuestionQuery {
	return &CompletedQuestionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCompletedQuestion},
		inters: c.Interceptors(),
	}
}

// Get returns a CompletedQuestion entity by its id.
func (c *CompletedQuestionClient) Get(ctx context.Context, id int) (*CompletedQuestion, error) {
	return c.Query().Where(completedquestion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompletedQuestionClient) GetX(ctx context.Context, id int) *CompletedQuestion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStartedPoll queries the started_poll edge of a CompletedQuestion.
func (c *CompletedQuestionClient) QueryStartedPoll(cq *CompletedQuestion) *StartedPollQuery {
	query := (&StartedPollClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(completedquestion.Table, completedquestion.FieldID, id),
			sqlgraph.To(startedpoll.Table, startedpoll.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, completedquestion.StartedPollTable, completedquestion.StartedPollColumn),
		)
		fromV = sqlgraph.Neighbors(cq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestion queries the question edge of a CompletedQuestion.
func (c *CompletedQuestionClient) QueryQuestion(cq *CompletedQuestion) *QuestionQuery {
	query := (&QuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(completedquestion.Table, completedquestion.FieldID, id),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, completedquestion.QuestionTable, completedquestion.QuestionColumn),
		)
		fromV = sqlgraph.Neighbors(cq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompletedQuestionClient) Hooks() []Hook {
	return c.hooks.CompletedQuestion
}

// Interceptors returns the client interceptors.
func (c *CompletedQuestionClient) Interceptors() []Interceptor {
	return c.inters.CompletedQuestion
}

func (c *CompletedQuestionClient) mutate(ctx context.Context, m *CompletedQuestionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CompletedQuestionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CompletedQuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CompletedQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CompletedQuestionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CompletedQuestion mutation op: %q", m.Op())
	}
}

// PollClient is a client for the Poll schema.
type PollClient struct {
	config
}

// NewPollClient returns a client for the Poll from the given config.
func NewPollClient(c config) *PollClient {
	return &PollClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `poll.Hooks(f(g(h())))`.
func (c *PollClient) Use(hooks ...Hook) {
	c.hooks.Poll = append(c.hooks.Poll, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `poll.Intercept(f(g(h())))`.
func (c *PollClient) Intercept(interceptors ...Interceptor) {
	c.inters.Poll = append(c.inters.Poll, interceptors...)
}

// Create returns a builder for creating a Poll entity.
func (c *PollClient) Create() *PollCreate {
	mutation := newPollMutation(c.config, OpCreate)
	return &PollCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Poll entities.
func (c *PollClient) CreateBulk(builders ...*PollCreate) *PollCreateBulk {
	return &PollCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PollClient) MapCreateBulk(slice any, setFunc func(*PollCreate, int)) *PollCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PollCreateBulk{err: fmt.Errorf("calling to PollClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PollCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PollCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Poll.
func (c *PollClient) Update() *PollUpdate {
	mutation := newPollMutation(c.config, OpUpdate)
	return &PollUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PollClient) UpdateOne(po *Poll) *PollUpdateOne {
	mutation := newPollMutation(c.config, OpUpdateOne, withPoll(po))
	return &PollUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PollClient) UpdateOneID(id int) *PollUpdateOne {
	mutation := newPollMutation(c.config, OpUpdateOne, withPollID(id))
	return &PollUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Poll.
func (c *PollClient) Delete() *PollDelete {
	mutation := newPollMutation(c.config, OpDelete)
	return &PollDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PollClient) DeleteOne(po *Poll) *PollDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PollClient) DeleteOneID(id int) *PollDeleteOne {
	builder := c.Delete().Where(poll.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PollDeleteOne{builder}
}

// Query returns a query builder for Poll.
func (c *PollClient) Query() *PollQuery {
	return &PollQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePoll},
		inters: c.Interceptors(),
	}
}

// Get returns a Poll entity by its id.
func (c *PollClient) Get(ctx context.Context, id int) (*Poll, error) {
	return c.Query().Where(poll.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PollClient) GetX(ctx context.Context, id int) *Poll {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a Poll.
func (c *PollClient) QueryCreator(po *Poll) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(poll.Table, poll.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, poll.CreatorTable, poll.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestions queries the questions edge of a Poll.
func (c *PollClient) QueryQuestions(po *Poll) *QuestionQuery {
	query := (&QuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(poll.Table, poll.FieldID, id),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, poll.QuestionsTable, poll.QuestionsColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStartedPolls queries the started_polls edge of a Poll.
func (c *PollClient) QueryStartedPolls(po *Poll) *StartedPollQuery {
	query := (&StartedPollClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(poll.Table, poll.FieldID, id),
			sqlgraph.To(startedpoll.Table, startedpoll.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, poll.StartedPollsTable, poll.StartedPollsColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PollClient) Hooks() []Hook {
	return c.hooks.Poll
}

// Interceptors returns the client interceptors.
func (c *PollClient) Interceptors() []Interceptor {
	return c.inters.Poll
}

func (c *PollClient) mutate(ctx context.Context, m *PollMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PollCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PollUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PollUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PollDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Poll mutation op: %q", m.Op())
	}
}

// QuestionClient is a client for the Question schema.
type QuestionClient struct {
	config
}

// NewQuestionClient returns a client for the Question from the given config.
func NewQuestionClient(c config) *QuestionClient {
	return &QuestionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `question.Hooks(f(g(h())))`.
func (c *QuestionClient) Use(hooks ...Hook) {
	c.hooks.Question = append(c.hooks.Question, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `question.Intercept(f(g(h())))`.
func (c *QuestionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Question = append(c.inters.Question, interceptors...)
}

// Create returns a builder for creating a Question entity.
func (c *QuestionClient) Create() *QuestionCreate {
	mutation := newQuestionMutation(c.config, OpCreate)
	return &QuestionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Question entities.
func (c *QuestionClient) CreateBulk(builders ...*QuestionCreate) *QuestionCreateBulk {
	return &QuestionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *QuestionClient) MapCreateBulk(slice any, setFunc func(*QuestionCreate, int)) *QuestionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &QuestionCreateBulk{err: fmt.Errorf("calling to QuestionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*QuestionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &QuestionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Question.
func (c *QuestionClient) Update() *QuestionUpdate {
	mutation := newQuestionMutation(c.config, OpUpdate)
	return &QuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuestionClient) UpdateOne(q *Question) *QuestionUpdateOne {
	mutation := newQuestionMutation(c.config, OpUpdateOne, withQuestion(q))
	return &QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuestionClient) UpdateOneID(id int) *QuestionUpdateOne {
	mutation := newQuestionMutation(c.config, OpUpdateOne, withQuestionID(id))
	return &QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Question.
func (c *QuestionClient) Delete() *QuestionDelete {
	mutation := newQuestionMutation(c.config, OpDelete)
	return &QuestionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuestionClient) DeleteOne(q *Question) *QuestionDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuestionClient) DeleteOneID(id int) *QuestionDeleteOne {
	builder := c.Delete().Where(question.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuestionDeleteOne{builder}
}

// Query returns a query builder for Question.
func (c *QuestionClient) Query() *QuestionQuery {
	return &QuestionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuestion},
		inters: c.Interceptors(),
	}
}

// Get returns a Question entity by its id.
func (c *QuestionClient) Get(ctx context.Context, id int) (*Question, error) {
	return c.Query().Where(question.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuestionClient) GetX(ctx context.Context, id int) *Question {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOptions queries the options edge of a Question.
func (c *QuestionClient) QueryOptions(q *Question) *QuestionOptionQuery {
	query := (&QuestionOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(question.Table, question.FieldID, id),
			sqlgraph.To(questionoption.Table, questionoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, question.OptionsTable, question.OptionsColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNextQuestionInv queries the next_question_inv edge of a Question.
func (c *QuestionClient) QueryNextQuestionInv(q *Question) *QuestionQuery {
	query := (&QuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(question.Table, question.FieldID, id),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, question.NextQuestionInvTable, question.NextQuestionInvColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNextQuestion queries the next_question edge of a Question.
func (c *QuestionClient) QueryNextQuestion(q *Question) *QuestionQuery {
	query := (&QuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(question.Table, question.FieldID, id),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, question.NextQuestionTable, question.NextQuestionColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPoll queries the poll edge of a Question.
func (c *QuestionClient) QueryPoll(q *Question) *PollQuery {
	query := (&PollClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(question.Table, question.FieldID, id),
			sqlgraph.To(poll.Table, poll.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, question.PollTable, question.PollColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompletedQuestions queries the completed_questions edge of a Question.
func (c *QuestionClient) QueryCompletedQuestions(q *Question) *CompletedQuestionQuery {
	query := (&CompletedQuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(question.Table, question.FieldID, id),
			sqlgraph.To(completedquestion.Table, completedquestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, question.CompletedQuestionsTable, question.CompletedQuestionsColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuestionClient) Hooks() []Hook {
	return c.hooks.Question
}

// Interceptors returns the client interceptors.
func (c *QuestionClient) Interceptors() []Interceptor {
	return c.inters.Question
}

func (c *QuestionClient) mutate(ctx context.Context, m *QuestionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuestionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuestionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Question mutation op: %q", m.Op())
	}
}

// QuestionOptionClient is a client for the QuestionOption schema.
type QuestionOptionClient struct {
	config
}

// NewQuestionOptionClient returns a client for the QuestionOption from the given config.
func NewQuestionOptionClient(c config) *QuestionOptionClient {
	return &QuestionOptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `questionoption.Hooks(f(g(h())))`.
func (c *QuestionOptionClient) Use(hooks ...Hook) {
	c.hooks.QuestionOption = append(c.hooks.QuestionOption, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `questionoption.Intercept(f(g(h())))`.
func (c *QuestionOptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.QuestionOption = append(c.inters.QuestionOption, interceptors...)
}

// Create returns a builder for creating a QuestionOption entity.
func (c *QuestionOptionClient) Create() *QuestionOptionCreate {
	mutation := newQuestionOptionMutation(c.config, OpCreate)
	return &QuestionOptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of QuestionOption entities.
func (c *QuestionOptionClient) CreateBulk(builders ...*QuestionOptionCreate) *QuestionOptionCreateBulk {
	return &QuestionOptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *QuestionOptionClient) MapCreateBulk(slice any, setFunc func(*QuestionOptionCreate, int)) *QuestionOptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &QuestionOptionCreateBulk{err: fmt.Errorf("calling to QuestionOptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*QuestionOptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &QuestionOptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for QuestionOption.
func (c *QuestionOptionClient) Update() *QuestionOptionUpdate {
	mutation := newQuestionOptionMutation(c.config, OpUpdate)
	return &QuestionOptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuestionOptionClient) UpdateOne(qo *QuestionOption) *QuestionOptionUpdateOne {
	mutation := newQuestionOptionMutation(c.config, OpUpdateOne, withQuestionOption(qo))
	return &QuestionOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuestionOptionClient) UpdateOneID(id int) *QuestionOptionUpdateOne {
	mutation := newQuestionOptionMutation(c.config, OpUpdateOne, withQuestionOptionID(id))
	return &QuestionOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for QuestionOption.
func (c *QuestionOptionClient) Delete() *QuestionOptionDelete {
	mutation := newQuestionOptionMutation(c.config, OpDelete)
	return &QuestionOptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuestionOptionClient) DeleteOne(qo *QuestionOption) *QuestionOptionDeleteOne {
	return c.DeleteOneID(qo.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuestionOptionClient) DeleteOneID(id int) *QuestionOptionDeleteOne {
	builder := c.Delete().Where(questionoption.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuestionOptionDeleteOne{builder}
}

// Query returns a query builder for QuestionOption.
func (c *QuestionOptionClient) Query() *QuestionOptionQuery {
	return &QuestionOptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuestionOption},
		inters: c.Interceptors(),
	}
}

// Get returns a QuestionOption entity by its id.
func (c *QuestionOptionClient) Get(ctx context.Context, id int) (*QuestionOption, error) {
	return c.Query().Where(questionoption.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuestionOptionClient) GetX(ctx context.Context, id int) *QuestionOption {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNextOptionInv queries the next_option_inv edge of a QuestionOption.
func (c *QuestionOptionClient) QueryNextOptionInv(qo *QuestionOption) *QuestionOptionQuery {
	query := (&QuestionOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := qo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(questionoption.Table, questionoption.FieldID, id),
			sqlgraph.To(questionoption.Table, questionoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, questionoption.NextOptionInvTable, questionoption.NextOptionInvColumn),
		)
		fromV = sqlgraph.Neighbors(qo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNextOption queries the next_option edge of a QuestionOption.
func (c *QuestionOptionClient) QueryNextOption(qo *QuestionOption) *QuestionOptionQuery {
	query := (&QuestionOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := qo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(questionoption.Table, questionoption.FieldID, id),
			sqlgraph.To(questionoption.Table, questionoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, questionoption.NextOptionTable, questionoption.NextOptionColumn),
		)
		fromV = sqlgraph.Neighbors(qo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestion queries the question edge of a QuestionOption.
func (c *QuestionOptionClient) QueryQuestion(qo *QuestionOption) *QuestionQuery {
	query := (&QuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := qo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(questionoption.Table, questionoption.FieldID, id),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, questionoption.QuestionTable, questionoption.QuestionColumn),
		)
		fromV = sqlgraph.Neighbors(qo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuestionOptionClient) Hooks() []Hook {
	return c.hooks.QuestionOption
}

// Interceptors returns the client interceptors.
func (c *QuestionOptionClient) Interceptors() []Interceptor {
	return c.inters.QuestionOption
}

func (c *QuestionOptionClient) mutate(ctx context.Context, m *QuestionOptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuestionOptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuestionOptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuestionOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuestionOptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown QuestionOption mutation op: %q", m.Op())
	}
}

// StartedPollClient is a client for the StartedPoll schema.
type StartedPollClient struct {
	config
}

// NewStartedPollClient returns a client for the StartedPoll from the given config.
func NewStartedPollClient(c config) *StartedPollClient {
	return &StartedPollClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `startedpoll.Hooks(f(g(h())))`.
func (c *StartedPollClient) Use(hooks ...Hook) {
	c.hooks.StartedPoll = append(c.hooks.StartedPoll, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `startedpoll.Intercept(f(g(h())))`.
func (c *StartedPollClient) Intercept(interceptors ...Interceptor) {
	c.inters.StartedPoll = append(c.inters.StartedPoll, interceptors...)
}

// Create returns a builder for creating a StartedPoll entity.
func (c *StartedPollClient) Create() *StartedPollCreate {
	mutation := newStartedPollMutation(c.config, OpCreate)
	return &StartedPollCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StartedPoll entities.
func (c *StartedPollClient) CreateBulk(builders ...*StartedPollCreate) *StartedPollCreateBulk {
	return &StartedPollCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StartedPollClient) MapCreateBulk(slice any, setFunc func(*StartedPollCreate, int)) *StartedPollCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StartedPollCreateBulk{err: fmt.Errorf("calling to StartedPollClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StartedPollCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StartedPollCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StartedPoll.
func (c *StartedPollClient) Update() *StartedPollUpdate {
	mutation := newStartedPollMutation(c.config, OpUpdate)
	return &StartedPollUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StartedPollClient) UpdateOne(sp *StartedPoll) *StartedPollUpdateOne {
	mutation := newStartedPollMutation(c.config, OpUpdateOne, withStartedPoll(sp))
	return &StartedPollUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StartedPollClient) UpdateOneID(id int) *StartedPollUpdateOne {
	mutation := newStartedPollMutation(c.config, OpUpdateOne, withStartedPollID(id))
	return &StartedPollUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StartedPoll.
func (c *StartedPollClient) Delete() *StartedPollDelete {
	mutation := newStartedPollMutation(c.config, OpDelete)
	return &StartedPollDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StartedPollClient) DeleteOne(sp *StartedPoll) *StartedPollDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StartedPollClient) DeleteOneID(id int) *StartedPollDeleteOne {
	builder := c.Delete().Where(startedpoll.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StartedPollDeleteOne{builder}
}

// Query returns a query builder for StartedPoll.
func (c *StartedPollClient) Query() *StartedPollQuery {
	return &StartedPollQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStartedPoll},
		inters: c.Interceptors(),
	}
}

// Get returns a StartedPoll entity by its id.
func (c *StartedPollClient) Get(ctx context.Context, id int) (*StartedPoll, error) {
	return c.Query().Where(startedpoll.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StartedPollClient) GetX(ctx context.Context, id int) *StartedPoll {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPoll queries the poll edge of a StartedPoll.
func (c *StartedPollClient) QueryPoll(sp *StartedPoll) *PollQuery {
	query := (&PollClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(startedpoll.Table, startedpoll.FieldID, id),
			sqlgraph.To(poll.Table, poll.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, startedpoll.PollTable, startedpoll.PollColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a StartedPoll.
func (c *StartedPollClient) QueryUser(sp *StartedPoll) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(startedpoll.Table, startedpoll.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, startedpoll.UserTable, startedpoll.UserColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompletedQuestions queries the completed_questions edge of a StartedPoll.
func (c *StartedPollClient) QueryCompletedQuestions(sp *StartedPoll) *CompletedQuestionQuery {
	query := (&CompletedQuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(startedpoll.Table, startedpoll.FieldID, id),
			sqlgraph.To(completedquestion.Table, completedquestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, startedpoll.CompletedQuestionsTable, startedpoll.CompletedQuestionsColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StartedPollClient) Hooks() []Hook {
	return c.hooks.StartedPoll
}

// Interceptors returns the client interceptors.
func (c *StartedPollClient) Interceptors() []Interceptor {
	return c.inters.StartedPoll
}

func (c *StartedPollClient) mutate(ctx context.Context, m *StartedPollMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StartedPollCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StartedPollUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StartedPollUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StartedPollDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StartedPoll mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPolls queries the polls edge of a User.
func (c *UserClient) QueryPolls(u *User) *PollQuery {
	query := (&PollClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(poll.Table, poll.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PollsTable, user.PollsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStartedPolls queries the started_polls edge of a User.
func (c *UserClient) QueryStartedPolls(u *User) *StartedPollQuery {
	query := (&StartedPollClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(startedpoll.Table, startedpoll.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.StartedPollsTable, user.StartedPollsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		CompletedQuestion, Poll, Question, QuestionOption, StartedPoll, User []ent.Hook
	}
	inters struct {
		CompletedQuestion, Poll, Question, QuestionOption, StartedPoll,
		User []ent.Interceptor
	}
)
