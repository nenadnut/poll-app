// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"poll-app/ent/completedquestion"
	"poll-app/ent/predicate"
	"poll-app/ent/question"
	"poll-app/ent/startedpoll"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// CompletedQuestionUpdate is the builder for updating CompletedQuestion entities.
type CompletedQuestionUpdate struct {
	config
	hooks    []Hook
	mutation *CompletedQuestionMutation
}

// Where appends a list predicates to the CompletedQuestionUpdate builder.
func (cqu *CompletedQuestionUpdate) Where(ps ...predicate.CompletedQuestion) *CompletedQuestionUpdate {
	cqu.mutation.Where(ps...)
	return cqu
}

// SetStartedPollID sets the "started_poll_id" field.
func (cqu *CompletedQuestionUpdate) SetStartedPollID(i int) *CompletedQuestionUpdate {
	cqu.mutation.SetStartedPollID(i)
	return cqu
}

// SetNillableStartedPollID sets the "started_poll_id" field if the given value is not nil.
func (cqu *CompletedQuestionUpdate) SetNillableStartedPollID(i *int) *CompletedQuestionUpdate {
	if i != nil {
		cqu.SetStartedPollID(*i)
	}
	return cqu
}

// SetQuestionID sets the "question_id" field.
func (cqu *CompletedQuestionUpdate) SetQuestionID(i int) *CompletedQuestionUpdate {
	cqu.mutation.SetQuestionID(i)
	return cqu
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (cqu *CompletedQuestionUpdate) SetNillableQuestionID(i *int) *CompletedQuestionUpdate {
	if i != nil {
		cqu.SetQuestionID(*i)
	}
	return cqu
}

// SetAnswers sets the "answers" field.
func (cqu *CompletedQuestionUpdate) SetAnswers(i []int) *CompletedQuestionUpdate {
	cqu.mutation.SetAnswers(i)
	return cqu
}

// AppendAnswers appends i to the "answers" field.
func (cqu *CompletedQuestionUpdate) AppendAnswers(i []int) *CompletedQuestionUpdate {
	cqu.mutation.AppendAnswers(i)
	return cqu
}

// SetCreatedAt sets the "created_at" field.
func (cqu *CompletedQuestionUpdate) SetCreatedAt(t time.Time) *CompletedQuestionUpdate {
	cqu.mutation.SetCreatedAt(t)
	return cqu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cqu *CompletedQuestionUpdate) SetNillableCreatedAt(t *time.Time) *CompletedQuestionUpdate {
	if t != nil {
		cqu.SetCreatedAt(*t)
	}
	return cqu
}

// SetUpdatedAt sets the "updated_at" field.
func (cqu *CompletedQuestionUpdate) SetUpdatedAt(t time.Time) *CompletedQuestionUpdate {
	cqu.mutation.SetUpdatedAt(t)
	return cqu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cqu *CompletedQuestionUpdate) SetNillableUpdatedAt(t *time.Time) *CompletedQuestionUpdate {
	if t != nil {
		cqu.SetUpdatedAt(*t)
	}
	return cqu
}

// SetStartedPoll sets the "started_poll" edge to the StartedPoll entity.
func (cqu *CompletedQuestionUpdate) SetStartedPoll(s *StartedPoll) *CompletedQuestionUpdate {
	return cqu.SetStartedPollID(s.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (cqu *CompletedQuestionUpdate) SetQuestion(q *Question) *CompletedQuestionUpdate {
	return cqu.SetQuestionID(q.ID)
}

// Mutation returns the CompletedQuestionMutation object of the builder.
func (cqu *CompletedQuestionUpdate) Mutation() *CompletedQuestionMutation {
	return cqu.mutation
}

// ClearStartedPoll clears the "started_poll" edge to the StartedPoll entity.
func (cqu *CompletedQuestionUpdate) ClearStartedPoll() *CompletedQuestionUpdate {
	cqu.mutation.ClearStartedPoll()
	return cqu
}

// ClearQuestion clears the "question" edge to the Question entity.
func (cqu *CompletedQuestionUpdate) ClearQuestion() *CompletedQuestionUpdate {
	cqu.mutation.ClearQuestion()
	return cqu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cqu *CompletedQuestionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cqu.sqlSave, cqu.mutation, cqu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cqu *CompletedQuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := cqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cqu *CompletedQuestionUpdate) Exec(ctx context.Context) error {
	_, err := cqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cqu *CompletedQuestionUpdate) ExecX(ctx context.Context) {
	if err := cqu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cqu *CompletedQuestionUpdate) check() error {
	if _, ok := cqu.mutation.StartedPollID(); cqu.mutation.StartedPollCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CompletedQuestion.started_poll"`)
	}
	if _, ok := cqu.mutation.QuestionID(); cqu.mutation.QuestionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CompletedQuestion.question"`)
	}
	return nil
}

func (cqu *CompletedQuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cqu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(completedquestion.Table, completedquestion.Columns, sqlgraph.NewFieldSpec(completedquestion.FieldID, field.TypeInt))
	if ps := cqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cqu.mutation.Answers(); ok {
		_spec.SetField(completedquestion.FieldAnswers, field.TypeJSON, value)
	}
	if value, ok := cqu.mutation.AppendedAnswers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, completedquestion.FieldAnswers, value)
		})
	}
	if value, ok := cqu.mutation.CreatedAt(); ok {
		_spec.SetField(completedquestion.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cqu.mutation.UpdatedAt(); ok {
		_spec.SetField(completedquestion.FieldUpdatedAt, field.TypeTime, value)
	}
	if cqu.mutation.StartedPollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedquestion.StartedPollTable,
			Columns: []string{completedquestion.StartedPollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(startedpoll.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cqu.mutation.StartedPollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedquestion.StartedPollTable,
			Columns: []string{completedquestion.StartedPollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(startedpoll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cqu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedquestion.QuestionTable,
			Columns: []string{completedquestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cqu.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedquestion.QuestionTable,
			Columns: []string{completedquestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{completedquestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cqu.mutation.done = true
	return n, nil
}

// CompletedQuestionUpdateOne is the builder for updating a single CompletedQuestion entity.
type CompletedQuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompletedQuestionMutation
}

// SetStartedPollID sets the "started_poll_id" field.
func (cquo *CompletedQuestionUpdateOne) SetStartedPollID(i int) *CompletedQuestionUpdateOne {
	cquo.mutation.SetStartedPollID(i)
	return cquo
}

// SetNillableStartedPollID sets the "started_poll_id" field if the given value is not nil.
func (cquo *CompletedQuestionUpdateOne) SetNillableStartedPollID(i *int) *CompletedQuestionUpdateOne {
	if i != nil {
		cquo.SetStartedPollID(*i)
	}
	return cquo
}

// SetQuestionID sets the "question_id" field.
func (cquo *CompletedQuestionUpdateOne) SetQuestionID(i int) *CompletedQuestionUpdateOne {
	cquo.mutation.SetQuestionID(i)
	return cquo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (cquo *CompletedQuestionUpdateOne) SetNillableQuestionID(i *int) *CompletedQuestionUpdateOne {
	if i != nil {
		cquo.SetQuestionID(*i)
	}
	return cquo
}

// SetAnswers sets the "answers" field.
func (cquo *CompletedQuestionUpdateOne) SetAnswers(i []int) *CompletedQuestionUpdateOne {
	cquo.mutation.SetAnswers(i)
	return cquo
}

// AppendAnswers appends i to the "answers" field.
func (cquo *CompletedQuestionUpdateOne) AppendAnswers(i []int) *CompletedQuestionUpdateOne {
	cquo.mutation.AppendAnswers(i)
	return cquo
}

// SetCreatedAt sets the "created_at" field.
func (cquo *CompletedQuestionUpdateOne) SetCreatedAt(t time.Time) *CompletedQuestionUpdateOne {
	cquo.mutation.SetCreatedAt(t)
	return cquo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cquo *CompletedQuestionUpdateOne) SetNillableCreatedAt(t *time.Time) *CompletedQuestionUpdateOne {
	if t != nil {
		cquo.SetCreatedAt(*t)
	}
	return cquo
}

// SetUpdatedAt sets the "updated_at" field.
func (cquo *CompletedQuestionUpdateOne) SetUpdatedAt(t time.Time) *CompletedQuestionUpdateOne {
	cquo.mutation.SetUpdatedAt(t)
	return cquo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cquo *CompletedQuestionUpdateOne) SetNillableUpdatedAt(t *time.Time) *CompletedQuestionUpdateOne {
	if t != nil {
		cquo.SetUpdatedAt(*t)
	}
	return cquo
}

// SetStartedPoll sets the "started_poll" edge to the StartedPoll entity.
func (cquo *CompletedQuestionUpdateOne) SetStartedPoll(s *StartedPoll) *CompletedQuestionUpdateOne {
	return cquo.SetStartedPollID(s.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (cquo *CompletedQuestionUpdateOne) SetQuestion(q *Question) *CompletedQuestionUpdateOne {
	return cquo.SetQuestionID(q.ID)
}

// Mutation returns the CompletedQuestionMutation object of the builder.
func (cquo *CompletedQuestionUpdateOne) Mutation() *CompletedQuestionMutation {
	return cquo.mutation
}

// ClearStartedPoll clears the "started_poll" edge to the StartedPoll entity.
func (cquo *CompletedQuestionUpdateOne) ClearStartedPoll() *CompletedQuestionUpdateOne {
	cquo.mutation.ClearStartedPoll()
	return cquo
}

// ClearQuestion clears the "question" edge to the Question entity.
func (cquo *CompletedQuestionUpdateOne) ClearQuestion() *CompletedQuestionUpdateOne {
	cquo.mutation.ClearQuestion()
	return cquo
}

// Where appends a list predicates to the CompletedQuestionUpdate builder.
func (cquo *CompletedQuestionUpdateOne) Where(ps ...predicate.CompletedQuestion) *CompletedQuestionUpdateOne {
	cquo.mutation.Where(ps...)
	return cquo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cquo *CompletedQuestionUpdateOne) Select(field string, fields ...string) *CompletedQuestionUpdateOne {
	cquo.fields = append([]string{field}, fields...)
	return cquo
}

// Save executes the query and returns the updated CompletedQuestion entity.
func (cquo *CompletedQuestionUpdateOne) Save(ctx context.Context) (*CompletedQuestion, error) {
	return withHooks(ctx, cquo.sqlSave, cquo.mutation, cquo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cquo *CompletedQuestionUpdateOne) SaveX(ctx context.Context) *CompletedQuestion {
	node, err := cquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cquo *CompletedQuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := cquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cquo *CompletedQuestionUpdateOne) ExecX(ctx context.Context) {
	if err := cquo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cquo *CompletedQuestionUpdateOne) check() error {
	if _, ok := cquo.mutation.StartedPollID(); cquo.mutation.StartedPollCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CompletedQuestion.started_poll"`)
	}
	if _, ok := cquo.mutation.QuestionID(); cquo.mutation.QuestionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CompletedQuestion.question"`)
	}
	return nil
}

func (cquo *CompletedQuestionUpdateOne) sqlSave(ctx context.Context) (_node *CompletedQuestion, err error) {
	if err := cquo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(completedquestion.Table, completedquestion.Columns, sqlgraph.NewFieldSpec(completedquestion.FieldID, field.TypeInt))
	id, ok := cquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CompletedQuestion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, completedquestion.FieldID)
		for _, f := range fields {
			if !completedquestion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != completedquestion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cquo.mutation.Answers(); ok {
		_spec.SetField(completedquestion.FieldAnswers, field.TypeJSON, value)
	}
	if value, ok := cquo.mutation.AppendedAnswers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, completedquestion.FieldAnswers, value)
		})
	}
	if value, ok := cquo.mutation.CreatedAt(); ok {
		_spec.SetField(completedquestion.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cquo.mutation.UpdatedAt(); ok {
		_spec.SetField(completedquestion.FieldUpdatedAt, field.TypeTime, value)
	}
	if cquo.mutation.StartedPollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedquestion.StartedPollTable,
			Columns: []string{completedquestion.StartedPollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(startedpoll.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cquo.mutation.StartedPollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedquestion.StartedPollTable,
			Columns: []string{completedquestion.StartedPollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(startedpoll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cquo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedquestion.QuestionTable,
			Columns: []string{completedquestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cquo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedquestion.QuestionTable,
			Columns: []string{completedquestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CompletedQuestion{config: cquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{completedquestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cquo.mutation.done = true
	return _node, nil
}
