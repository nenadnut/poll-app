// Code generated by ent, DO NOT EDIT.

package question

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the question type in the database.
	Label = "question"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldHead holds the string denoting the head field in the database.
	FieldHead = "head"
	// FieldRequired holds the string denoting the required field in the database.
	FieldRequired = "required"
	// FieldNumOfAnswers holds the string denoting the num_of_answers field in the database.
	FieldNumOfAnswers = "num_of_answers"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPollID holds the string denoting the poll_id field in the database.
	FieldPollID = "poll_id"
	// EdgeOptions holds the string denoting the options edge name in mutations.
	EdgeOptions = "options"
	// EdgeNextQuestionInv holds the string denoting the next_question_inv edge name in mutations.
	EdgeNextQuestionInv = "next_question_inv"
	// EdgeNextQuestion holds the string denoting the next_question edge name in mutations.
	EdgeNextQuestion = "next_question"
	// EdgePoll holds the string denoting the poll edge name in mutations.
	EdgePoll = "poll"
	// EdgeCompletedQuestions holds the string denoting the completed_questions edge name in mutations.
	EdgeCompletedQuestions = "completed_questions"
	// Table holds the table name of the question in the database.
	Table = "questions"
	// OptionsTable is the table that holds the options relation/edge.
	OptionsTable = "question_options"
	// OptionsInverseTable is the table name for the QuestionOption entity.
	// It exists in this package in order to avoid circular dependency with the "questionoption" package.
	OptionsInverseTable = "question_options"
	// OptionsColumn is the table column denoting the options relation/edge.
	OptionsColumn = "question_id"
	// NextQuestionInvTable is the table that holds the next_question_inv relation/edge.
	NextQuestionInvTable = "questions"
	// NextQuestionInvColumn is the table column denoting the next_question_inv relation/edge.
	NextQuestionInvColumn = "question_next_question"
	// NextQuestionTable is the table that holds the next_question relation/edge.
	NextQuestionTable = "questions"
	// NextQuestionColumn is the table column denoting the next_question relation/edge.
	NextQuestionColumn = "question_next_question"
	// PollTable is the table that holds the poll relation/edge.
	PollTable = "questions"
	// PollInverseTable is the table name for the Poll entity.
	// It exists in this package in order to avoid circular dependency with the "poll" package.
	PollInverseTable = "polls"
	// PollColumn is the table column denoting the poll relation/edge.
	PollColumn = "poll_id"
	// CompletedQuestionsTable is the table that holds the completed_questions relation/edge.
	CompletedQuestionsTable = "completed_questions"
	// CompletedQuestionsInverseTable is the table name for the CompletedQuestion entity.
	// It exists in this package in order to avoid circular dependency with the "completedquestion" package.
	CompletedQuestionsInverseTable = "completed_questions"
	// CompletedQuestionsColumn is the table column denoting the completed_questions relation/edge.
	CompletedQuestionsColumn = "question_id"
)

// Columns holds all SQL columns for question fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldText,
	FieldHead,
	FieldRequired,
	FieldNumOfAnswers,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPollID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "questions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"question_next_question",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultHead holds the default value on creation for the "head" field.
	DefaultHead bool
	// DefaultRequired holds the default value on creation for the "required" field.
	DefaultRequired bool
	// DefaultNumOfAnswers holds the default value on creation for the "num_of_answers" field.
	DefaultNumOfAnswers int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Question queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByHead orders the results by the head field.
func ByHead(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHead, opts...).ToFunc()
}

// ByRequired orders the results by the required field.
func ByRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequired, opts...).ToFunc()
}

// ByNumOfAnswers orders the results by the num_of_answers field.
func ByNumOfAnswers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumOfAnswers, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPollID orders the results by the poll_id field.
func ByPollID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPollID, opts...).ToFunc()
}

// ByOptionsCount orders the results by options count.
func ByOptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOptionsStep(), opts...)
	}
}

// ByOptions orders the results by options terms.
func ByOptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNextQuestionInvCount orders the results by next_question_inv count.
func ByNextQuestionInvCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNextQuestionInvStep(), opts...)
	}
}

// ByNextQuestionInv orders the results by next_question_inv terms.
func ByNextQuestionInv(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNextQuestionInvStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNextQuestionField orders the results by next_question field.
func ByNextQuestionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNextQuestionStep(), sql.OrderByField(field, opts...))
	}
}

// ByPollField orders the results by poll field.
func ByPollField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPollStep(), sql.OrderByField(field, opts...))
	}
}

// ByCompletedQuestionsCount orders the results by completed_questions count.
func ByCompletedQuestionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCompletedQuestionsStep(), opts...)
	}
}

// ByCompletedQuestions orders the results by completed_questions terms.
func ByCompletedQuestions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompletedQuestionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OptionsTable, OptionsColumn),
	)
}
func newNextQuestionInvStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, NextQuestionInvTable, NextQuestionInvColumn),
	)
}
func newNextQuestionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, NextQuestionTable, NextQuestionColumn),
	)
}
func newPollStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PollInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PollTable, PollColumn),
	)
}
func newCompletedQuestionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompletedQuestionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CompletedQuestionsTable, CompletedQuestionsColumn),
	)
}
