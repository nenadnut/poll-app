// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"poll-app/ent/poll"
	"poll-app/ent/predicate"
	"poll-app/ent/question"
	"poll-app/ent/questionoption"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionUpdate is the builder for updating Question entities.
type QuestionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionMutation
}

// Where appends a list predicates to the QuestionUpdate builder.
func (qu *QuestionUpdate) Where(ps ...predicate.Question) *QuestionUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetText sets the "text" field.
func (qu *QuestionUpdate) SetText(s string) *QuestionUpdate {
	qu.mutation.SetText(s)
	return qu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableText(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetText(*s)
	}
	return qu
}

// SetHead sets the "head" field.
func (qu *QuestionUpdate) SetHead(b bool) *QuestionUpdate {
	qu.mutation.SetHead(b)
	return qu
}

// SetNillableHead sets the "head" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableHead(b *bool) *QuestionUpdate {
	if b != nil {
		qu.SetHead(*b)
	}
	return qu
}

// SetNumOfAnswers sets the "num_of_answers" field.
func (qu *QuestionUpdate) SetNumOfAnswers(i int) *QuestionUpdate {
	qu.mutation.ResetNumOfAnswers()
	qu.mutation.SetNumOfAnswers(i)
	return qu
}

// SetNillableNumOfAnswers sets the "num_of_answers" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableNumOfAnswers(i *int) *QuestionUpdate {
	if i != nil {
		qu.SetNumOfAnswers(*i)
	}
	return qu
}

// AddNumOfAnswers adds i to the "num_of_answers" field.
func (qu *QuestionUpdate) AddNumOfAnswers(i int) *QuestionUpdate {
	qu.mutation.AddNumOfAnswers(i)
	return qu
}

// SetCreatedAt sets the "created_at" field.
func (qu *QuestionUpdate) SetCreatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetCreatedAt(t)
	return qu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableCreatedAt(t *time.Time) *QuestionUpdate {
	if t != nil {
		qu.SetCreatedAt(*t)
	}
	return qu
}

// SetUpdatedAt sets the "updated_at" field.
func (qu *QuestionUpdate) SetUpdatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetUpdatedAt(t)
	return qu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableUpdatedAt(t *time.Time) *QuestionUpdate {
	if t != nil {
		qu.SetUpdatedAt(*t)
	}
	return qu
}

// SetPollID sets the "poll_id" field.
func (qu *QuestionUpdate) SetPollID(i int) *QuestionUpdate {
	qu.mutation.SetPollID(i)
	return qu
}

// SetNillablePollID sets the "poll_id" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillablePollID(i *int) *QuestionUpdate {
	if i != nil {
		qu.SetPollID(*i)
	}
	return qu
}

// AddOptionIDs adds the "options" edge to the QuestionOption entity by IDs.
func (qu *QuestionUpdate) AddOptionIDs(ids ...int) *QuestionUpdate {
	qu.mutation.AddOptionIDs(ids...)
	return qu
}

// AddOptions adds the "options" edges to the QuestionOption entity.
func (qu *QuestionUpdate) AddOptions(q ...*QuestionOption) *QuestionUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.AddOptionIDs(ids...)
}

// AddNextQuestionInvIDs adds the "next_question_inv" edge to the Question entity by IDs.
func (qu *QuestionUpdate) AddNextQuestionInvIDs(ids ...int) *QuestionUpdate {
	qu.mutation.AddNextQuestionInvIDs(ids...)
	return qu
}

// AddNextQuestionInv adds the "next_question_inv" edges to the Question entity.
func (qu *QuestionUpdate) AddNextQuestionInv(q ...*Question) *QuestionUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.AddNextQuestionInvIDs(ids...)
}

// SetNextQuestionID sets the "next_question" edge to the Question entity by ID.
func (qu *QuestionUpdate) SetNextQuestionID(id int) *QuestionUpdate {
	qu.mutation.SetNextQuestionID(id)
	return qu
}

// SetNillableNextQuestionID sets the "next_question" edge to the Question entity by ID if the given value is not nil.
func (qu *QuestionUpdate) SetNillableNextQuestionID(id *int) *QuestionUpdate {
	if id != nil {
		qu = qu.SetNextQuestionID(*id)
	}
	return qu
}

// SetNextQuestion sets the "next_question" edge to the Question entity.
func (qu *QuestionUpdate) SetNextQuestion(q *Question) *QuestionUpdate {
	return qu.SetNextQuestionID(q.ID)
}

// SetPoll sets the "poll" edge to the Poll entity.
func (qu *QuestionUpdate) SetPoll(p *Poll) *QuestionUpdate {
	return qu.SetPollID(p.ID)
}

// Mutation returns the QuestionMutation object of the builder.
func (qu *QuestionUpdate) Mutation() *QuestionMutation {
	return qu.mutation
}

// ClearOptions clears all "options" edges to the QuestionOption entity.
func (qu *QuestionUpdate) ClearOptions() *QuestionUpdate {
	qu.mutation.ClearOptions()
	return qu
}

// RemoveOptionIDs removes the "options" edge to QuestionOption entities by IDs.
func (qu *QuestionUpdate) RemoveOptionIDs(ids ...int) *QuestionUpdate {
	qu.mutation.RemoveOptionIDs(ids...)
	return qu
}

// RemoveOptions removes "options" edges to QuestionOption entities.
func (qu *QuestionUpdate) RemoveOptions(q ...*QuestionOption) *QuestionUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.RemoveOptionIDs(ids...)
}

// ClearNextQuestionInv clears all "next_question_inv" edges to the Question entity.
func (qu *QuestionUpdate) ClearNextQuestionInv() *QuestionUpdate {
	qu.mutation.ClearNextQuestionInv()
	return qu
}

// RemoveNextQuestionInvIDs removes the "next_question_inv" edge to Question entities by IDs.
func (qu *QuestionUpdate) RemoveNextQuestionInvIDs(ids ...int) *QuestionUpdate {
	qu.mutation.RemoveNextQuestionInvIDs(ids...)
	return qu
}

// RemoveNextQuestionInv removes "next_question_inv" edges to Question entities.
func (qu *QuestionUpdate) RemoveNextQuestionInv(q ...*Question) *QuestionUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.RemoveNextQuestionInvIDs(ids...)
}

// ClearNextQuestion clears the "next_question" edge to the Question entity.
func (qu *QuestionUpdate) ClearNextQuestion() *QuestionUpdate {
	qu.mutation.ClearNextQuestion()
	return qu
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (qu *QuestionUpdate) ClearPoll() *QuestionUpdate {
	qu.mutation.ClearPoll()
	return qu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuestionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuestionUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuestionUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qu *QuestionUpdate) check() error {
	if _, ok := qu.mutation.PollID(); qu.mutation.PollCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Question.poll"`)
	}
	return nil
}

func (qu *QuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.Text(); ok {
		_spec.SetField(question.FieldText, field.TypeString, value)
	}
	if value, ok := qu.mutation.Head(); ok {
		_spec.SetField(question.FieldHead, field.TypeBool, value)
	}
	if value, ok := qu.mutation.NumOfAnswers(); ok {
		_spec.SetField(question.FieldNumOfAnswers, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedNumOfAnswers(); ok {
		_spec.AddField(question.FieldNumOfAnswers, field.TypeInt, value)
	}
	if value, ok := qu.mutation.CreatedAt(); ok {
		_spec.SetField(question.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := qu.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if qu.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.OptionsTable,
			Columns: []string{question.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedOptionsIDs(); len(nodes) > 0 && !qu.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.OptionsTable,
			Columns: []string{question.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.OptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.OptionsTable,
			Columns: []string{question.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.NextQuestionInvCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   question.NextQuestionInvTable,
			Columns: []string{question.NextQuestionInvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedNextQuestionInvIDs(); len(nodes) > 0 && !qu.mutation.NextQuestionInvCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   question.NextQuestionInvTable,
			Columns: []string{question.NextQuestionInvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.NextQuestionInvIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   question.NextQuestionInvTable,
			Columns: []string{question.NextQuestionInvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.NextQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   question.NextQuestionTable,
			Columns: []string{question.NextQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.NextQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   question.NextQuestionTable,
			Columns: []string{question.NextQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.PollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.PollTable,
			Columns: []string{question.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.PollTable,
			Columns: []string{question.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuestionUpdateOne is the builder for updating a single Question entity.
type QuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionMutation
}

// SetText sets the "text" field.
func (quo *QuestionUpdateOne) SetText(s string) *QuestionUpdateOne {
	quo.mutation.SetText(s)
	return quo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableText(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetText(*s)
	}
	return quo
}

// SetHead sets the "head" field.
func (quo *QuestionUpdateOne) SetHead(b bool) *QuestionUpdateOne {
	quo.mutation.SetHead(b)
	return quo
}

// SetNillableHead sets the "head" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableHead(b *bool) *QuestionUpdateOne {
	if b != nil {
		quo.SetHead(*b)
	}
	return quo
}

// SetNumOfAnswers sets the "num_of_answers" field.
func (quo *QuestionUpdateOne) SetNumOfAnswers(i int) *QuestionUpdateOne {
	quo.mutation.ResetNumOfAnswers()
	quo.mutation.SetNumOfAnswers(i)
	return quo
}

// SetNillableNumOfAnswers sets the "num_of_answers" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableNumOfAnswers(i *int) *QuestionUpdateOne {
	if i != nil {
		quo.SetNumOfAnswers(*i)
	}
	return quo
}

// AddNumOfAnswers adds i to the "num_of_answers" field.
func (quo *QuestionUpdateOne) AddNumOfAnswers(i int) *QuestionUpdateOne {
	quo.mutation.AddNumOfAnswers(i)
	return quo
}

// SetCreatedAt sets the "created_at" field.
func (quo *QuestionUpdateOne) SetCreatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetCreatedAt(t)
	return quo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableCreatedAt(t *time.Time) *QuestionUpdateOne {
	if t != nil {
		quo.SetCreatedAt(*t)
	}
	return quo
}

// SetUpdatedAt sets the "updated_at" field.
func (quo *QuestionUpdateOne) SetUpdatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetUpdatedAt(t)
	return quo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableUpdatedAt(t *time.Time) *QuestionUpdateOne {
	if t != nil {
		quo.SetUpdatedAt(*t)
	}
	return quo
}

// SetPollID sets the "poll_id" field.
func (quo *QuestionUpdateOne) SetPollID(i int) *QuestionUpdateOne {
	quo.mutation.SetPollID(i)
	return quo
}

// SetNillablePollID sets the "poll_id" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillablePollID(i *int) *QuestionUpdateOne {
	if i != nil {
		quo.SetPollID(*i)
	}
	return quo
}

// AddOptionIDs adds the "options" edge to the QuestionOption entity by IDs.
func (quo *QuestionUpdateOne) AddOptionIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.AddOptionIDs(ids...)
	return quo
}

// AddOptions adds the "options" edges to the QuestionOption entity.
func (quo *QuestionUpdateOne) AddOptions(q ...*QuestionOption) *QuestionUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.AddOptionIDs(ids...)
}

// AddNextQuestionInvIDs adds the "next_question_inv" edge to the Question entity by IDs.
func (quo *QuestionUpdateOne) AddNextQuestionInvIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.AddNextQuestionInvIDs(ids...)
	return quo
}

// AddNextQuestionInv adds the "next_question_inv" edges to the Question entity.
func (quo *QuestionUpdateOne) AddNextQuestionInv(q ...*Question) *QuestionUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.AddNextQuestionInvIDs(ids...)
}

// SetNextQuestionID sets the "next_question" edge to the Question entity by ID.
func (quo *QuestionUpdateOne) SetNextQuestionID(id int) *QuestionUpdateOne {
	quo.mutation.SetNextQuestionID(id)
	return quo
}

// SetNillableNextQuestionID sets the "next_question" edge to the Question entity by ID if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableNextQuestionID(id *int) *QuestionUpdateOne {
	if id != nil {
		quo = quo.SetNextQuestionID(*id)
	}
	return quo
}

// SetNextQuestion sets the "next_question" edge to the Question entity.
func (quo *QuestionUpdateOne) SetNextQuestion(q *Question) *QuestionUpdateOne {
	return quo.SetNextQuestionID(q.ID)
}

// SetPoll sets the "poll" edge to the Poll entity.
func (quo *QuestionUpdateOne) SetPoll(p *Poll) *QuestionUpdateOne {
	return quo.SetPollID(p.ID)
}

// Mutation returns the QuestionMutation object of the builder.
func (quo *QuestionUpdateOne) Mutation() *QuestionMutation {
	return quo.mutation
}

// ClearOptions clears all "options" edges to the QuestionOption entity.
func (quo *QuestionUpdateOne) ClearOptions() *QuestionUpdateOne {
	quo.mutation.ClearOptions()
	return quo
}

// RemoveOptionIDs removes the "options" edge to QuestionOption entities by IDs.
func (quo *QuestionUpdateOne) RemoveOptionIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.RemoveOptionIDs(ids...)
	return quo
}

// RemoveOptions removes "options" edges to QuestionOption entities.
func (quo *QuestionUpdateOne) RemoveOptions(q ...*QuestionOption) *QuestionUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.RemoveOptionIDs(ids...)
}

// ClearNextQuestionInv clears all "next_question_inv" edges to the Question entity.
func (quo *QuestionUpdateOne) ClearNextQuestionInv() *QuestionUpdateOne {
	quo.mutation.ClearNextQuestionInv()
	return quo
}

// RemoveNextQuestionInvIDs removes the "next_question_inv" edge to Question entities by IDs.
func (quo *QuestionUpdateOne) RemoveNextQuestionInvIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.RemoveNextQuestionInvIDs(ids...)
	return quo
}

// RemoveNextQuestionInv removes "next_question_inv" edges to Question entities.
func (quo *QuestionUpdateOne) RemoveNextQuestionInv(q ...*Question) *QuestionUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.RemoveNextQuestionInvIDs(ids...)
}

// ClearNextQuestion clears the "next_question" edge to the Question entity.
func (quo *QuestionUpdateOne) ClearNextQuestion() *QuestionUpdateOne {
	quo.mutation.ClearNextQuestion()
	return quo
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (quo *QuestionUpdateOne) ClearPoll() *QuestionUpdateOne {
	quo.mutation.ClearPoll()
	return quo
}

// Where appends a list predicates to the QuestionUpdate builder.
func (quo *QuestionUpdateOne) Where(ps ...predicate.Question) *QuestionUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuestionUpdateOne) Select(field string, fields ...string) *QuestionUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Question entity.
func (quo *QuestionUpdateOne) Save(ctx context.Context) (*Question, error) {
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuestionUpdateOne) SaveX(ctx context.Context) *Question {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuestionUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (quo *QuestionUpdateOne) check() error {
	if _, ok := quo.mutation.PollID(); quo.mutation.PollCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Question.poll"`)
	}
	return nil
}

func (quo *QuestionUpdateOne) sqlSave(ctx context.Context) (_node *Question, err error) {
	if err := quo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Question.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, question.FieldID)
		for _, f := range fields {
			if !question.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != question.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.Text(); ok {
		_spec.SetField(question.FieldText, field.TypeString, value)
	}
	if value, ok := quo.mutation.Head(); ok {
		_spec.SetField(question.FieldHead, field.TypeBool, value)
	}
	if value, ok := quo.mutation.NumOfAnswers(); ok {
		_spec.SetField(question.FieldNumOfAnswers, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedNumOfAnswers(); ok {
		_spec.AddField(question.FieldNumOfAnswers, field.TypeInt, value)
	}
	if value, ok := quo.mutation.CreatedAt(); ok {
		_spec.SetField(question.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := quo.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if quo.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.OptionsTable,
			Columns: []string{question.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedOptionsIDs(); len(nodes) > 0 && !quo.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.OptionsTable,
			Columns: []string{question.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.OptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.OptionsTable,
			Columns: []string{question.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.NextQuestionInvCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   question.NextQuestionInvTable,
			Columns: []string{question.NextQuestionInvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedNextQuestionInvIDs(); len(nodes) > 0 && !quo.mutation.NextQuestionInvCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   question.NextQuestionInvTable,
			Columns: []string{question.NextQuestionInvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.NextQuestionInvIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   question.NextQuestionInvTable,
			Columns: []string{question.NextQuestionInvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.NextQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   question.NextQuestionTable,
			Columns: []string{question.NextQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.NextQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   question.NextQuestionTable,
			Columns: []string{question.NextQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.PollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.PollTable,
			Columns: []string{question.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.PollTable,
			Columns: []string{question.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Question{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
